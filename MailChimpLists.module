<?php

/**
 * MailChimp Newsletter
 * Lists Management
 *
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 * Changelog:
 * v0.0.4
 *     - hide member subscription, add member search
 *
 * v0.0.3
 *     - update to Mailchimp v3
 *
 */


class MailChimpLists extends Process implements ConfigurableModule {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {

        return array(
            'title' => 'MailChimp Lists',
            'version' => 4,
            'summary' => 'Manage MailChimp Lists',
            'author' => "Philipp Urlich 'Soma'",
            'href' => '',
            'singular' => true,
            'permission' => "mailchimp",
            'permissions' => array("mailchimp" => "MailChimp Newsletter"),
            'requires' => array('MailChimpNewsletter')
        );
    }



    public function init() {
        parent::init();
        $tabs = $this->modules->get("JqueryWireTabs");
        wire('config')->js('JqueryWireTabs', array(
            'rememberTabs' => (int) 1,
            ));
        $this->mailchimp = $this->modules->get("MailChimpNewsletter");
        $this->apikey = $this->mailchimp->apikey;
    }

    public function execute(){

        $out = "";

        $this->fuel->set('processHeadline', 'Lists');
        $out .= "<h2>" . $this->_("Lists") . "</h2>";
        $retval = $this->mailchimp->_get("lists");

       if(empty($retval)) return $this->error($this->_("No lists found. Create a new list first."));

        // create table object to be rendered
        $table = $this->_listsTable($retval);

        $add = $this->modules->get("InputfieldButton");
        $add->attr("value",$this->_("Create new List"));
        $add->attr('class', $add->class . ' head_button_clone');
        $add->attr('href', "./add/");

        $out .= $table->render();

        return $out;
    }


    public function executeAdd() {
        // TODO?
    }


    public function executeUnsubscribe() {
        $list_id = $this->input->get->id;
        $email = $this->input->get->email;
        $emailHash = md5(strtolower($email));
        $this->mailchimp->_patch("lists/{$list_id}/members/{$emailHash}", array(
            "status" => "unsubscribed",
            ));

        $this->message(sprintf($this->_("Unsubscribed '%s' from the list"), $email));
        $this->session->redirect("../edit/?id=$list_id");

    }

    public function executeDelete() {
        $list_id = $this->input->get->id;
        $email = $this->input->get->email;
        $emailHash = md5(strtolower($email));
        $this->mailchimp->_delete("lists/{$list_id}/members/{$emailHash}");

        $this->message(sprintf($this->_("Deleted '%s' from the list"), $email));
        $this->session->redirect("../edit/?id=$list_id");

    }

    public function executeEdit() {

        $this->fuel->breadcrumbs->add(new Breadcrumb('../', 'Lists'));
        $this->fuel->set('processHeadline', 'Edit List');

        $list_id = $this->input->get->id;

        $retval = $this->mailchimp->_get("lists/$list_id");
        // // print_r($retval);

        $form = $this->_buildEditForm($retval);

        // save submited form
        if($this->input->post->submit) {

            $form->processInput($this->input->post);

            if(!$form->getErrors()) {

                $res = $this->mailchimp->_patch("lists/{$list_id}", array(
                        "name" => $this->sanitizer->text($form->get("name")->value),
                        "campaign_defaults" => array(
                            "subject" => $this->sanitizer->text($form->get("default_subject")->value),
                            "from_email" => $this->sanitizer->text($form->get("default_from_email")->value),
                            "from_name" => $this->sanitizer->text($form->get("default_from_name")->value),
                            ),
                        "notify_on_subscribe" => $this->sanitizer->text($form->get("notify_on_subscribe")->value),
                        "notify_on_unsubscribe" => $this->sanitizer->text($form->get("notify_on_unsubscribe")->value),
                    ));
                if($res){
                    $this->message("List saved");
                }
            }
        }

        if($this->input->post->subscribe) {

            $form->email->required = 1;
            $form->email_type->required = 1;
            $form->processInput($this->input->post);

            if(!$form->getErrors()) {

                $email = $this->sanitizer->email($form->get("email")->value);
                $email_type = $this->sanitizer->text($form->get("email_type")->value);

                $language = "";
                if($form->get("language")->value){
                    $language = $this->sanitizer->text($form->get("language")->value);
                }

                $merge_fields = array();
                if($retval['stats']['merge_field_count']){
                    $mergeFields = $form->find("name^=merge_");

                    foreach($mergeFields as $f){
                        if($f->value == "") continue;
                        $fieldClass = get_class($f);
                        $mergeTag = str_replace("merge_", "", $f->name);
                        $fvalue = $f->value;
                        if($f instanceof InputfieldSelect){
                            $fvalue = $f->value;
                        }
                        $merge_fields[$mergeTag] = $fvalue;
                    }
                }

                $res = $this->mailchimp->_post("lists/{$list_id}/members", array(
                        "email_address" => $email,
                        "email_type" => $email_type,
                        "status" => "subscribed", // todo
                        "language" => $language,
                        "merge_fields" => $merge_fields,
                    ));

                if($res){
                    $this->message(sprintf($this->_("Subscribed '%s' to list"), $email));
                }

                $this->session->redirect("../edit/?id=$list_id");
            }

        }


        return $form->render();
    }


    /**
     * get all lists
     * @return MarkupAdminDataTable table of lists
     */
    private function _listsTable(Array $lists){

        $table = $this->modules->get("MarkupAdminDataTable");
        $table->headerRow(array(
                          "Name",
                          "Count",
                          "Created",
                          "Type",
                          "Default From Name",
                          "Default From Email",
                          "Default Subject",
                          "ID",
                          "Action"
                        ));

        foreach($lists['lists'] as $ca) {
            $action_name = $this->_("edit");
            $action = "edit/?id=".$ca['id'];

            $table->row(array(
                $ca['name'] => "$action",
                $ca['stats']['member_count'],
                $ca['date_created'],
                $ca['email_type_option'],
                $ca['campaign_defaults']['from_name'],
                $ca['campaign_defaults']['from_email'],
                $ca['campaign_defaults']['subject'],
                $ca['id'],
                $action_name => $action
            ));
        }

        return $table;
    }

    // protected function _listInsert($newsletter_id, $campaign_id) {
    //     $query = "INSERT INTO {$this->className()} (campaign_id, newsletter_id, created) VALUES ('$campaign_id',$newsletter_id,now())";
    //     $result = $this->db->query($query);
    //     $this->message($this->_("Campaign inserted into DB"));
    //     return mysqli_insert_id($this->db);

    // }

    // protected function _listUpdate($newsletter_id, $campaign_id) {
    //     $values = "newsletter_id=" . $newsletter_id;
    //     $query = "UPDATE {$this->className} SET $values WHERE campaign_id='$campaign_id'";
    //     $result = $this->db->query($query);
    //     $this->message($this->_("Campaign updated in DB"));
    //     return $result;

    // }


    protected function _buildEditForm($data = array()) {

        $this->modules->get('JqueryFancybox');

        $list_id = $data['id'];

        // print_r($data);

        $form = $this->modules->get("InputfieldForm");
        $form->action = "../edit/?id=$list_id";
        $form->method = "post";
        $form->attr('id',$this->className());

        $field = $this->modules->get('InputfieldHidden');
        $field->attr('name', 'id');
        $field->attr('value', $list_id);
        $form->append($field);


        /**
         * Tab Subscribe
         */
        $wrapper_subscription = new InputfieldWrapper();
        $wrapper_subscription->attr("id", $this->className() . "Subscription");
        $wrapper_subscription->attr("title", $this->_("Subscription Forms"));

        $field = $this->modules->get("InputfieldMarkup");
        // $field->attr('id+name',"subscribe_url_short");
        $field->label = $this->_("Subscribe short URL");
        $field->description = $this->_("Use this URL to let users subscribe to this list");
        $field->value = "<a href='{$data["subscribe_url_short"]}'>{$data["subscribe_url_short"]}</a>";
        $wrapper_subscription->add($field);

        $field = $this->modules->get("InputfieldMarkup");
        // $field->attr('id+name',"subscribe_url_long");
        $field->label = $this->_("Subscribe long URL");
        $field->description = $this->_("Use this URL to let users subscribe to this list");
        $field->value = "<a href='{$data["subscribe_url_long"]}'>{$data["subscribe_url_long"]}</a>";
        $wrapper_subscription->add($field);

        /**
         * Tab Beamer
         */
        $wrapper_beamer = new InputfieldWrapper();
        $wrapper_beamer->attr("id", $this->className() . "Beamer");
        $wrapper_beamer->attr("title", $this->_("Email Beamer"));

        $field = $this->modules->get("InputfieldText");
        $field->attr('id',"beamer_address");
        $field->label = $this->_("Beamer Email Address");
        $field->description = $this->_("Use this Email Address to send a custom created Email this list.");
        $field->value = $data["beamer_address"];
        $wrapper_beamer->add($field);

        /**
         * Tab Settings
         */
        $wrapper_settings = new InputfieldWrapper();
        $wrapper_settings->attr("id", $this->className() . "Settings");
        $wrapper_settings->attr("title", $this->_("Settings"));

        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"name");
        $field->label = $this->_("Name");
        $field->description = $this->_("Please enter a name for the list");
        $field->required = 1;
        $field->attr('value', $data['name']);
        $wrapper_settings->add($field);


        $fieldset = $this->modules->InputfieldFieldset;
        $fieldset->label = $this->_("Campaign defaults");

        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"default_subject");
        $field->label = $this->_("'subject line'");
        $field->description = $this->_("Email subject for your campaign message. Keep it relevant and non-spammy.");
        $field->description .= " " . $this->_("[Infos](http://kb.mailchimp.com/campaigns/previews-and-tests/best-practices-for-email-subject-lines)");
        $field->required = 0;
        $field->maxlength = 150;
        $field->attr('value', $data['campaign_defaults']['subject']);
        $fieldset->add($field);

        $field = $this->modules->get("InputfieldEmail");
        $field->attr('name',"default_from_email");
        $field->label = $this->_("'from' email");
        $field->description = $this->_("This is the address people will send replies to. Make sure someone actually checks this email account.");
        $field->notes = $this->_("Some email services block spam by responding to emails with a challenge question that asks the sender to complete a simple task that proves they are not a spam bot. If the reply-to email address you provide is not frequently checked, you could miss these challenge response emails, and therefore decrease your delivery rate.");
        $field->required = 0;
        $field->maxlength = 100;
        $field->attr('value', $data['campaign_defaults']['from_email']);
        $fieldset->add($field);

        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"default_from_name");
        $field->label = $this->_("'from name'");
        $field->notes = $this->_("This is the name your emails will come from. Use something your subscribers will instantly recognize, like your company name.");
        $field->required = 0;
        $field->maxlength = 100;
        $field->attr('value', $data['campaign_defaults']['from_name']);
        $fieldset->add($field);

        $wrapper_settings->add($fieldset);

        $fieldset = $this->modules->InputfieldFieldset;
        $fieldset->label = $this->_("New subscriber notifications");
        $fieldset->description = $this->_("Get quick email alerts when subscribers join or leave this list (not recommended for large lists).");

        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"notify_on_subscribe");
        $field->label = $this->_("Email subscribe notifications to'");
        $field->notes = $this->_("Additional email addresses must be separated by a comma.");
        $field->required = 0;
        $field->maxlength = 100;
        $field->attr('value', $data['notify_on_subscribe']);
        $fieldset->add($field);

        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"notify_on_unsubscribe");
        $field->label = $this->_("Email unsubscribe notifications to'");
        $field->notes = $this->_("Additional email addresses must be separated by a comma.");
        $field->required = 0;
        $field->maxlength = 100;
        $field->attr('value', $data['notify_on_unsubscribe']);
        $fieldset->add($field);

        $wrapper_settings->add($fieldset);



        /**
         * Tab Emails
         */

        $isSearch = false;
        $search_query = "";
        if($this->input->search_query_email) {
            $isSearch = true;
            $search_query = $this->sanitizer->text($this->input->search_query_email);
            $this->input->whitelist("search_query_email", $search_query);
        }

        $wrapper_list = new InputfieldWrapper();
        $wrapper_list->attr("id", $this->className() . "ListMembers");
        $wrapper_list->attr("title", $this->_("List Members"));

        $preview = $this->modules->get("InputfieldMarkup");

        $membersLimit = 20;
        $membersOffset = ($this->input->pageNum - 1) * $membersLimit;

        if(!$isSearch){

            $retval = $this->mailchimp->_get("lists/{$list_id}/members", array(
                "offset" => $membersOffset,
                "count" => $membersLimit,
                "status" => "subscribed",
                ));

        } else {
            $membersLimit = $this->_("all");
            $retval = $this->mailchimp->_get("search-members", array(
                "list_id" => $list_id,
                "query" => $search_query,
                ));

            // print_r($retval);
            $retval = $retval["full_search"];
        }


        $membersTotal = $retval['total_items'];

        $preview->value .= sprintf($this->_("Total member count: %s"), $membersTotal);
        $preview->value .= " | ";
        $preview->value .= sprintf($this->_("Viewing: %s"), $membersLimit) . "<br/>";
        $table = $this->modules->get("MarkupAdminDataTable");
        $table->setEncodeEntities(false);

        $table->headerRow(array(
                          "Email",
                          "Last modified",
                          "Actions"
                    ));

        $confirmText = $this->_("Unsubscribe this member?");
        foreach($retval["members"] as $member){
            $table->row(array(
                        $member["email_address"],
                        $member["last_changed"],
                        "<a href='../unsubscribe/?id={$list_id}&email={$member["email_address"]}' onclick='return confirm(\"$confirmText\")'>" . $this->_("unsubscribe") . "</a>",
                    ));
        }

        $this->input->whitelist("id", $list_id);
        $preview->value .= $table->render();

        if(!$isSearch){
            $pagination = new PageArray();
            $pagination->setTotal($membersTotal);
            $pagination->setLimit($membersLimit);
            $pagination->setStart($membersOffset);

            $preview->value .= $pagination->renderPager();
        }

        $fieldsetSubscribe = $this->modules->get("InputfieldFieldset");
        $fieldsetSubscribe->label = $this->_("Subscribe an E-mail Address");
        $fieldsetSubscribe->collapsed = Inputfield::collapsedYes;

        $field = $this->modules->get("InputfieldEmail");
        $field->label = $this->_("E-mail Address");
        $field->attr("name", "email");
        $fieldsetSubscribe->add($field);

        if($data['stats']['merge_field_count']) {

            $mergeFields = $this->mailchimp->_get("lists/{$list_id}/merge-fields");

            foreach($mergeFields['merge_fields'] as $mergefield){
                $type = ucfirst($mergefield['type']);
                if($type == "Radio") $type = "Radios";
                if($type == "Address") $type = "Text";
                $field = $this->modules->get("Inputfield{$type}");
                $field->label = $mergefield['name'];
                $field->attr("name", "merge_" . $mergefield['tag']);
                if(isset($mergefield["options"]["choices"])){
                    foreach($mergefield["options"]["choices"] as $key => $choice){
                        $field->addOption($choice, $choice); // value is label (mailchimp)
                    }
                }
                $fieldsetSubscribe->add($field);
            }
        }

        if(count(wire("languages"))){
            $field = $this->modules->InputfieldRadios;
            $field->label = $this->_("Language");
            $field->attr("name", "language");
            $field->optionColumns = 4;
            foreach(wire("languages") as $lang){
                $name = ($lang->isDefault()) ? "de" : $lang->name;
                $field->addOption($name, "$lang->title");
            }
            $fieldsetSubscribe->add($field);
        }

        $field = $this->modules->get("InputfieldSelect");
        $field->label = $this->_("E-mail Type");
        $field->attr("name", "email_type");
        $field->addOptions(array(
                           'html' => 'HTML',
                           'text' => 'Text'
                           ));
        $fieldsetSubscribe->add($field);

        $field = $this->modules->get("InputfieldSubmit");
        $field->attr("name", "subscribe");
        $field->attr("value", "subscribe");
        $fieldsetSubscribe->add($field);

        /**
         * Search subscribers
         *
         */
        $fieldsetSearch = $this->modules->get("InputfieldFieldset");
        $fieldsetSearch->label = $this->_("Search Members");
        if(!$search_query) $fieldsetSearch->collapsed = Inputfield::collapsedYes;

        $field = $this->modules->get("InputfieldText");
        $field->label = $this->_("E-mail");
        $field->attr("name", "search_query_email");
        $field->attr("value", $search_query);
        $fieldsetSearch->add($field);

        $field = $this->modules->get("InputfieldSubmit");
        $field->attr("name", "search");
        $field->attr("value", $this->_("search"));
        $fieldsetSearch->add($field);

        /**
         * Add wrappers and fieldsets
         */

        // $wrapper_list->add($fieldsetSubscribe);
        $wrapper_list->add($fieldsetSearch);
        $wrapper_list->add($preview);

        $form->add($wrapper_settings);
        $form->add($wrapper_list);
        $form->add($wrapper_subscription);
        $form->add($wrapper_beamer);

        $field = $this->modules->get("InputfieldSubmit");
        $field->attr("name","submit");
        $field->attr("value", $this->_("save"));

        $form->add($field);

        return $form;
    }


    public function install() {

        // db schema for saving list
        $sql = <<< _END
        CREATE TABLE {$this->className} (
            id INT UNSIGNED NOT NULL AUTO_INCREMENT,
            list_id VARCHAR(32) NULL,
            parent_id INT NULL,
            modified TIMESTAMP NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
            created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
            PRIMARY KEY (`id`)
        )
        ENGINE = MyISAM DEFAULT CHARSET=utf8;
_END;

        $this->db->query($sql);

    }

    public function uninstall() {
        $admin = $this->pages->find("name=mailchimp-lists")->first();
        if($admin->id && $this->pages->delete($admin)) {
            $this->message(__("Deleted mailchimp-lists admin page."));
        } else {
            $this->error(__("Couldn't find mailchimp-lists admin page."));
        }

        $this->db->query("DROP TABLE {$this->className}");

    }

    public static function getModuleConfigInputfields(array $data) {
        if($data) {} // ignore
        $inputfields = new InputfieldWrapper();
        return $inputfields;
    }

}
