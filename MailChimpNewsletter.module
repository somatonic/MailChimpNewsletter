<?php

/**
 * MailChimp Newsletter
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 * Changelog:
 *  v.0.0.7
 *  - fix issue with ajax requests (ie Repeater fields) on hook
 *
 *  v.0.0.6
 *  - fix error on first install when no apikey is yet configured
 *  - add support for multi apikey per role added via site config.php
 *
 *  v.0.0.5
 *  - update to API 3.0
 *
 *  v 0.0.4 - 17.06.2016 Philipp Urlich
 *  - Refactoring, removed old code
 *  - Added found campaigns as table view to page edit form MailChimp Tab
 *
 *
 * MailChimp API keys by roles
 * ------------------------------------------------------------------------------------------------------------------------
 * Work arround to work with multiple api keys (= MailChimp accounts) in module «MailChimp Newsletter» by Soma
 * add array items with role-name => apikey for every role
 *
 * $config->mailchimpKeysByRoles = array(
 *   "newsletter-a" => "878b077dd60a3k6caed59540fa9770b3-us14",
 *   "newsletter-b" => "6536025a0d6a4cd0f6ffebc06b1da985-us13",
 * );
 */


require_once( dirname(__FILE__) . "/MailChimp.php");


class MailChimpNewsletter extends WireData implements Module, ConfigurableModule {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {

        return array(
            'title' => 'MailChimp Newsletter',
            'version' => 7,
            'summary' => 'MailChimp Newsletter',
            'author' => "Philipp Urlich 'Soma'",
            'href' => '',
            'singular' => true,
            'autoload' => "template=admin",
            // 'permission' => "mailchimp",
            // 'permissions' => array("mailchimp" => "MailChimp Newsletter"),
            'installs' => array('MailChimpCampaigns','MailChimpLists'),
        );
    }


    public function __construct() { }

    public function init() {

        $config = $this->wire->config;
        $user = $this->wire->user;

        // Get role based MailChimp API key, if $config->mailchimpKeysByRoles is an array
        if(is_array($config->mailchimpKeysByRoles)) {
            foreach($config->mailchimpKeysByRoles as $role => $key) {
                if($user->hasRole($role)) {
                    $this->apikey = $key;
                    break;
                }
            }
        }

        if($this->apikey != '') {
            // MailChimp REST API 3.0
            $this->mailchimp = new Drewm\MailChimp\MailChimp($this->apikey);

            // add hook for rendering mailchimp tab on newsletter pages
            $this->addHookAfter("ProcessPageEdit::buildForm", $this, "hookPageEditForm");
            $this->addHookAfter("ProcessPageEdit::buildFormContent", $this, "hookPageEditFormContent");

        } else {

            if(!$this->session->get('mcKeyError') && $this->wire->page->name != 'login') {
                $this->error(__("No MailChimp API key defined. Do this in MailChimpNewsletter module settings or uninstall the MailChimpNewsletter module."));
                $this->wire->session->set('mcKeyError', 1);
            }

        }
    }

    /**
     * Call wrapper for API 3.0
     * @param  [type] $method [description]
     * @param  [type] $args   [description]
     * @return [type]         [description]
     */
    public function __call($method, $args){
        $method = str_replace("_", "", $method);
        if(!method_exists($this->mailchimp, "$method")) throw new WireException("function $method() does not exist");
        $res = call_user_func_array(array($this->mailchimp, $method), $args);


        wire("log")->save("mailchimp", "Action: $method, Args: " . print_r($args, true));
        wire("log")->save("mailchimp", "Action: $method, Res: " . print_r($res, true));

        if($res && isset($res['status']) && ctype_digit($res['status']) && $res['status'] != 200){
            $this->error($res['status'] . " - " . $res['title'] . " - " . $res['detail']);
            wire("log")->save("mailchimp", ($res['status'] . " - " . $res['title'] . " - " . $res['detail'] . " - Errors: " . print_r($res['errors'], true)));
            $res['success'] = false;
        } else {
            // wire("log")->save("mailchimp", ($res['status'] . " - " . $res['title'] . " - " . $res['detail'] . " - Errors: " . print_r($res['errors'], true)));
            $res['success'] = true;
        }
        return $res;
    }


    protected function _getNewsletterPageID($id) {
        $query = "SELECT * FROM {$this->className()} WHERE campaign_id = '$id';";
        $res = $this->db->query($query);
        $arr = $res->fetch_array();
        return $arr['newsletter_id'];
    }

    protected function _findCampaignsIDByPageID($id) {
        $query = "SELECT * FROM MailChimpCampaigns WHERE newsletter_id = '$id';";
        $res = $this->db->query($query);
        $arr = array();
        if($res->num_rows){
            while($row = $res->fetch_array()) {
                $arr[] = $row;
            }
            // print_r($arr);
            return $arr;
        } else {
            return false;
        }
    }


    /**
     * MailChimp Helpers (deprecated)
     * TODO: upgrade to v3
     */

    // public function subscribeListEmail($listID, $email, $mergevars = NULL) {
    //     $email = $this->sanitizer->email($email);
    //     if(!$email) throw new WireException("No Email specified");
    //     if(!$listID) throw new WireException("No ListID specified");

    //     $return = array();

    //     if($this->mcapi->listSubscribe($listID, $email, $mergevars) === true) {
    //         $return["success"] = 1;
    //         $return["message"] = "<p class='ui-state-highlight'>" . $this->_("To complete the subscription process, please click the link in the email we just sent you.") ."</p>";
    //     } else {
    //         // An error ocurred, return error message
    //         $return["success"] = 0;
    //         $return["message"] = $this->mcapi->errorMessage;
    //     }
    //     return $return;
    // }

    /**
     * Hook to add Mailchimp Newsletter tab after "Content" Tab
     */
    public function hookPageEditFormContent($event) {
        $page = $event->object->getPage();
        if(!$this->isNewsletterPage($page)) return;
        if(!$this->wire("user")->hasPermission("mailchimp")) return;
        $event->object->addTab($this->className(), "Mailchimp Newsletter");
    }

    public function isNewsletterPage($page){

        if(!count($this->newsletter_templates)) {
            return false;
        }
        $nltpl = wire("templates")->find("id=" . implode("|", $this->newsletter_templates));
        if(!$nltpl->count) return false;
        if(!$page->is("template=$nltpl")) return false;
        return true;

    }

    public function hookPageEditForm($event) {

        if($this->wire("config")->ajax) return;

        $page = $event->object->getPage();
        if(!$this->isNewsletterPage($page)) return;

        if(!$this->wire("user")->hasPermission("mailchimp")) return;

        $form = $event->return;
        $modules = wire("modules");
        $fs = new InputfieldWrapper();
        $fs->attr("title", "MailChimp Newsletter");
        $fs->id = $this->className();

        $f = $modules->InputfieldMarkup;
        $f->label = $this->_("Mailchimp campaign(s) using this page");

        // render found campaigns using the campaigns table method from MailChimpCampaigns
        // for convenience
        $campaignsFound = $this->_findCampaignsIDByPageID($page->id);
        if($campaignsFound) {
            $campaignsData = array();
            foreach($campaignsFound as $camp){
                $retval = $this->_get("campaigns/{$camp['campaign_id']}");
                if($retval) $campaignsData[] = $retval;
            }
            $campTable = $this->modules->MailChimpCampaigns->_campaignsTable($campaignsData);
            $f->value = $campTable->render();

        } else {
            $f->value = $this->_("No campaign found for this page. Create one one using the buttons below.");
        }
        $fs->add($f);


        $f = $modules->InputfieldMarkup;
        $f->label = $this->_("Create new MailChimp campaign");

        $createUrls = $this->getNewsletterUrlsArray($page);
        $campaignsCreateBaseUrl = wire("config")->urls->admin . "mailchimp-newsletter/mailchimp-campaigns/add/";
        $f->description = $this->_("Click on the button to create a new campaign using this page");

        if(wire("languages") && count(wire("languages"))){
            foreach($createUrls as $key => $url){
                $lang = wire("languages")->get($url['lang']);
                $langName = $lang->id ? "($lang->title)" : "";
                $f->value .= "<p><a class='ui-widget ui-button ui-state-default' href='$campaignsCreateBaseUrl?nlid=$page->id&nllang={$url['lang']}&amp;nlurl={$url['url']}' target='_blank' href=''>" . $this->_("create campaign") . " $langName</a> : URL: {$url['url']}</p>";
            }
        } else {
            foreach($createUrls as $key => $url){
                // $lang = wire("languages")->get($url['lang']);
                // $langName = $lang->id ? "($lang->title)" : "";
                $f->value .= "<p><a class='ui-widget ui-button ui-state-default' href='$campaignsCreateBaseUrl?nlid=$page->id&nllang={$url['lang']}&amp;nlurl={$url['url']}' target='_blank' href=''>" . $this->_("create campaign") . "</a> : URL: {$url['url']}</p>";
            }
        }

        $fs->add($f);
        $fieldsetContent = $form->find("id^=ProcessPageEdit")->first();
        $form->add($fs);
        $form->insertAfter($fs, $fieldsetContent);

    }

    public function getNewsletterUrlsArray($page){

        $urls = array();

        if(wire("languages") && count(wire("languages")) > 1){
            $langSaved = wire("user")->language;
            foreach(wire("languages") as $lang){
                wire("user")->language = $lang;
                if(wire("modules")->isInstalled("Multisite")){
                    $urls[] = array("lang" => $lang->id, "url" => wire("modules")->Multisite->getDomainUrl($page));
                } else {
                    $urls[] = array("lang" => $lang->id, "url" => $page->httpUrl);
                }
            }
            wire("user")->language = $langSaved;
        } else {
            if(wire("modules")->isInstalled("Multisite")){
                $urls[] = array('lang' => 0, 'url' => wire("modules")->Multisite->getDomainUrl($page));
            } else {
                $urls[] = array('lang' => 0, 'url' => $page->httpUrl);
            }
        }

        return $urls;
    }

    public function install() {

        // install admin pages needed

        if(!$this->pages->get("name=mailchimp-newsletter")->id) {
            $admin = new Page();
            $admin->parent = $this->pages->get(2);
            $admin->template = "admin";
            $admin->title = "MailChimp Newsletter";
            $admin->name = "mailchimp-newsletter";
            $admin->process = $this->modules->get("ProcessList");
            $mainpage = $admin->save();
        }

        $list_process = $this->modules->get("MailChimpCampaigns");
        if(!$this->pages->get("name=mailchimp-campaigns")->id) {
            $admin_c = new Page();
            $admin_c->parent = $admin;
            $admin_c->template = "admin";
            $admin_c->title = "MailChimp Campaigns";
            $admin_c->name = "mailchimp-campaigns";
            $admin_c->process = $list_process;
            $admin_c->save();
        }

        $list_process = $this->modules->get("MailChimpLists");
        if(!$this->pages->get("name=mailchimp-lists")->id) {
            $admin_l = new Page();
            $admin_l->parent = $admin;
            $admin_l->template = "admin";
            $admin_l->title = "MailChimp Lists";
            $admin_l->name = "mailchimp-lists";
            $admin_l->process = $list_process;
            $admin_l->save();
        }
    }

    public function uninstall() {
        $admin = $this->pages->find("name=mailchimp-newsletter")->first();
        if($admin->id && $this->pages->delete($admin)) {
            $this->message(__("Deleted mailchimp-newsletter admin page."));
        } else {
            $this->error(__("Couldn't find mailchimp-newsletter admin page."));
        }
    }

    static public function getModuleConfigInputfields(array $data) {
        // $data = array_merge(self::$defaults, $data);

        $fields = new InputfieldWrapper();
        $modules = wire("modules");

        $field = $modules->get("InputfieldText");
        $field->attr('name', 'apikey');
        $field->attr('size', 40);
        $field->attr('value', isset($data['apikey']) ? $data['apikey'] : "");
        $field->label = "MailChimp API Key";
        $fields->append($field);

        $field = $modules->get("InputfieldText");
        $field->attr('name', 'newsletter_parent_id');
        $field->attr('size', 10);
        $field->attr('value', isset($data['newsletter_parent_id']) ? $data['newsletter_parent_id'] : "");
        $field->label = "Newsletter Parent Page ID";
        $fields->append($field);

        $field = $modules->get("InputfieldAsmSelect");
        $field->attr('name', 'newsletter_templates');
        $field->attr('size', 10);
        $field->attr('value', isset($data['newsletter_templates']) ? $data['newsletter_templates'] : "");
        $tpls = wire("templates");
        foreach($tpls as $tpl) $field->addOption($tpl->id, $tpl->label ? $tpl->label : $tpl->name);
        $field->label = "Newsletter Templates you want to be able to select";
        $field->required = 0;
        $fields->append($field);

        return $fields;
    }
}
