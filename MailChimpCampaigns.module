<?php

/**
 * MailChimp Newsletter
 * Campaign Management
 *
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 *
 * Changelog:
 *
 *  v 0.0.4 - 17.06.2016 Philipp Urlich
 *  - Added schedule send function for campaigns
 *  - Refactoring, removed old code
 *  - Fix minor issues with saving segment id in DB
 *
 */


// Include composer dependencies
require __DIR__ . '/vendor/autoload.php';

// include API 3.0 minimal Wrapper
require_once( dirname(__FILE__) . "/MailChimp.php");

class MailChimpCampaigns extends Process implements ConfigurableModule {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {

        return array(
            'title' => 'MailChimp Campaigns',
            'version' => '2.1.0',
            'summary' => 'Manage MailChimp Campaigns',
            'author' => "Philipp Urlich 'Soma'",
            'href' => '',
            'singular' => true,
            'permission' => "mailchimp",
            'permissions' => array("mailchimp" => "MailChimp Newsletter"),
            'requires' => array('MailChimpNewsletter')
        );
    }

    static protected $defaults = array(

        );

    public function init() {

        parent::init();

        $this->modules->get("JqueryWireTabs");
        $this->mailchimp = $this->modules->get("MailChimpNewsletter");
        $this->apikey = $this->mailchimp->apikey;
        $this->mcapi = $this->mailchimp->mcapi;

        wire("config")->js("MailChimp", array(
                "urls" => array("MailChimpCampaigns" => wire("page")->url),
            ));

        // handle ajax loading for newletter url field when selecting a page
        if(wire("config")->ajax){

            if(wire("input")->post->getnlurl){
                $pageID = (int) wire("input")->post->pid;
                $page = wire("pages")->get($pageID);
                $response = array();
                $response['body'] = "";
                if($page->id){
                    $urls = $this->modules->MailChimpNewsletter->getNewsletterUrlsArray($page);
                    $response['body'] .= "<br>" . $this->_("Available URLs for this page") . ":";
                    foreach($urls as $key => $url){
                        $response["body"] .= "<br>" . $url['url'];
                    }
                    $response["urls"] = $urls;
                    echo json_encode($response);
                    exit;
                }
            }

        }
        // API v2.0
        // use $this->mailchimp->call(method, args);

        $this->modulePage = $this->pages->get("template=admin, process={$this->modules->getModuleID($this->className())}, include=hidden");
        $this->moduleUrl = $this->modulePage->id ? $this->modulePage->url : "";
    }

    public function ready(){



    }

    /**
     * List campaign from mailchimp
     */
    public function execute(){

        $out = "";

        $this->fuel->set('processHeadline', 'Campaigns');
        $out .= "<h2>" . $this->_("Campaigns") . "</h2>";

        $folders_list = '';
        $folders = $this->mailchimp->call("folders/list", array("type" => "campaign"));

        $form = wire("modules")->InputfieldForm;
        $form->attr("action", "");
        $form->attr("method", "post");

        if(count($folders)){
            $foldersFilter = wire("modules")->InputfieldSelect;
            $foldersFilter->label = __("Folders");
            $foldersFilter->attr("name", "folder_id");
            $foldersFilter->addOption("", __("All Folders"));
            foreach($folders as $f){
                $foldersFilter->addOption($f['folder_id'], $f['name'] . " ({$f['cnt']})");
            }
            $foldersFilter->attr("value", wire("input")->get->folder_id);
            $form->add($foldersFilter);
        }

        $folders_list = $form->render();

        $add = $this->modules->get("InputfieldButton");
        $add->attr("value",$this->_("Create new Campaign"));
        $add->attr('class', $add->class . ' head_button_clone');
        $add->attr('href', "./add/");

        $options = array();

        if(wire("input")->get->folder_id){
            $options["filters"]["folder_id"] = (int) wire("input")->get->folder_id;
            $this->input->whitelist("folder_id", wire("input")->get->folder_id);
        }

        // $options["since_create_time"] = date("c", strtotime("-1year"));
        $options["limit"] = 10;
        $options["start"] = ($this->input->pageNum - 1);// * $options["count"];

        $options['sort_field'] = "create_time";
        $options['sort_dir'] = "DESC";
        $retval = $this->mailchimp->call("campaigns/list", $options);
        // $retval = $this->mailchimp->_get("campaigns", $options); // v3


        if(count($retval['data'])){
            $campaignTable = $this->_campaignsTable($retval['data'])->render();
        } else {
            $campaignTable = $this->_("No campaigns");
        }

        $pagination = new PageArray();
        $pagination->setTotal($retval["total"]);
        $pagination->setLimit($options["limit"]);
        $pagination->setStart($options["start"] * $options["limit"]);


        $total = "<p>Total: " . $retval['total'] . "</p>";

        $content = "<div class='campaigns-result'>$campaignTable</div>";
        $content .= $pagination->renderPager();
        $content .= $total;
        $out .= $folders_list . $content . $add->render();

        return $out;

    }

    /**
     * edit the campaign
     * preview campaign
     * send tests
     * send campaign
     * schedule campaign
     * delete campaign
     */
    public function executeEdit() {

        $this->fuel->breadcrumbs->add(new Breadcrumb('../', 'Campaigns'));
        $this->fuel->set('processHeadline', 'Edit Campaign');

        $campaign_id = $this->input->get->id;
        if(!$campaign_id){
            return "<p>" . $this->_("No campaign ID specified") . "</p>";
        }

        $retval = $this->mailchimp->call("campaigns/list", array(
                "filters" => array("campaign_id" => $campaign_id),
            ));

        if(!$retval){
            return "<p>" . $this->_("No campaign found") . "</p>";
        }

        // build the edit form with multiple tabs
        $form = $this->_buildEditForm($retval['data'][0]);

        // update campaign when submited
        if($this->input->post->submit) {

            $form->email_test->required = 0;
            $form->processInput($this->input->post);

            if(!$form->get("newsletter_url")->value && !$form->get("newsletter_id")->value){
                $form->newsletter_id->error($this->_('Please select a newsletter page or enter a url below.'));
                $this->error($this->_("There's no content specified for your campaign."));
            }

            if(!$form->getErrors()) {

                $opts['options']['title'] = $form->get("title")->value;
                $opts['options']['list_id'] = $form->get("list_id")->value;

                $listSegment = $form->get("segment_" . $form->get("list_id")->value);

                if($listSegment){
                    $opts['segment_opts']['saved_segment_id'] = (int) $listSegment->value;
                }

                $opts['options']['subject'] = $form->get("subject_line")->value;
                $opts['options']['from_email'] = $form->get("reply_to")->value;
                $opts['options']['from_name'] = $form->get("from_name")->value;
                $opts['options']['to_name'] = $form->get("to_name")->value;

                $newsletterPageID = (int) $form->get("newsletter_id")->value;
                $newsletterPageUrl = $form->get("newsletter_url")->value;

                $opts['content']['url'] = $newsletterPageUrl;
                $opts['options']['generate_text'] = true;

                // generate text version
                // workaround for text version to update correctly, we make a second update on content
                $textVersion = $this->mailchimp->call("helper/generate-text", array(
                        "type" => "url",
                        "content" => array(
                                "cid" => $campaign_id,
                                "url" => $newsletterPageUrl
                            )
                        ));

                if($textVersion && $textVersion['text']){
                    $opts['content']['text'] = $textVersion['text'];
                }

                // update campaign on MailChimp
                foreach($opts as $key => $v){
                    $this->mailchimp->call("campaigns/update", array(
                            "cid" => $campaign_id,
                            "name" => $key,
                            "value" => $v
                        ));
                }

                // update campaign in DB table with newsletter page id
                $this->_update($newsletterPageID, $newsletterPageUrl, $campaign_id, $form->list_id->value, $listSegment->value);

                $this->message($this->_('Campaign updated'));
                $this->session->redirect("../edit/?id=$campaign_id");

            }
        }

        // send test email
        if($this->input->post->sendtest){
            // process form
            $form->processInput($this->input->post);
            // if no error
            if(!$form->getErrors()){

                if(strpos($form->get("email_test")->value, ",") !== false){
                    $emails = explode(",", $form->get("email_test")->value);
                } else {
                    $emails = array($form->get("email_test")->value);
                }
                $retval = $this->mcapi->campaignSendTest($campaign_id, $emails);
                if(!$this->_checkErrorMC()){
                    $this->error($this->_("Unable to Send Test Campaign!"));
                } else {
                    foreach($emails as $email){
                        $this->message(sprintf($this->_("Campaign Test sent to '%s'!"), $email));

                    }
                }
                $this->session->redirect($page->url . "?id=" . $campaign_id);
            }
        }

        // send campaign email
        if($this->input->post->sendcampaign){

            $form->email_test->required = 0;
            $form->processInput($this->input->post);

            if(!$form->getErrors()){
                $emails = array($this->input->post->email_test);
                $retval = $this->mcapi->campaignSendNow($campaign_id);

                $newsletter_id = $this->_getNewsletterPageID($campaign_id);
                $newsletter_page = $this->pages->get((int)$newsletter_id);

                if(!$this->_checkErrorMC()){
                    $this->error($this->_("Unable to Send Campaign!"));
                } else {
                    if($newsletter_page->id){
                        $newsletter_page->sent = 1;
                        $newsletter_page->save();
                    }
                    $this->message($this->_("Campaign Sent!"));
                }
            }
        }

        // schedule campaign
        if($this->input->post->schedulecampaign){

            $form->email_test->required = 0;
            $form->schedule_date->attr("value", $this->input->post->schedule_date);
            $form->schedule_hour->attr("value", $this->input->post->schedule_hour);
            $form->schedule_min->attr("value", $this->input->post->schedule_min);

            $scheduleDate = $this->input->post->schedule_date;
            if(!$scheduleDate) {
                $form->schedule_date->error("No Schedule 'Date' specified!");
            }

            $scheduleHour = $this->input->post->schedule_hour;
            if(!$scheduleHour) {
                $form->schedule_hour->error("No Schedule 'Hour' specified!");
            }

            $scheduleMin = $this->input->post->schedule_min;
            if(!$scheduleMin) {
                $form->schedule_min->error("No Schedule 'Minutes' specified!");
            }

            if($scheduleDate && $scheduleHour && $scheduleMin) {
                // $this->mailchimp->_post("/campaigns/{$campaign_id}/actions/unschedule");

                $utcDate = gmdate("c", strtotime("$scheduleDate $scheduleHour:$scheduleMin"));
                $this->mailchimp->_post("/campaigns/{$campaign_id}/actions/schedule",array(
                    "schedule_time" => $utcDate,
                    ));
                $this->message(sprintf($this->_('Campaign scheduled to send at: %s'), $utcDate));
                $this->session->redirect("../edit/?id=$campaign_id");
            }
        }

        if($this->input->post->unschedulecampaign){
            $this->mailchimp->_post("/campaigns/{$campaign_id}/actions/unschedule");
            $this->message($this->_('Campaign unscheduled'));
            $this->session->redirect("../edit/?id=$campaign_id");
        }

        // delete campaign
        if($this->input->post->deletecampaign){
            $this->mcapi->campaignDelete($campaign_id);
            if(!$this->_checkErrorMC()){
                $this->error($this->_("Unable to delete Campaign!"));
            } else {
                $this->message($this->_("Campaign deleted!"));
                $this->_delete($campaign_id);
                $this->session->redirect('../');
            }
        }


        // render form
        return $form->render();
    }

    /**
     * Create or add a new campaign to mailchimp
     */
    public function executeAdd() {

        $this->fuel->breadcrumbs->add(new Breadcrumb('../', 'Campaigns'));
        $this->fuel->set('processHeadline', 'Create Campaign');

        if($this->input->post->submit) {

            $form = $this->_buildAddForm();
            $form->processInput($this->input->post);

            // $formArray = $form->getAll();
            // print_r($formArray);
            // exit;
            $newsletterPageUrl = $form->get("newsletter_url")->value;
            $newsletterPageID = (int) $form->get("newsletter_id")->value;


            if((!$newsletterPageUrl) && (!$newsletterPageID)){
                $form->newsletter_id->error($this->_('Please select a newsletter page or enter a url below.'));
                $this->error($this->_('No content specified. Please select a newsletter or enter a URL.'));
            }

            if(!$form->getErrors()){

                // create new campaign
                // $type = 'regular';
                $opts['type'] = "regular";
                $opts['authenticate'] = true;

                // @TODO: V3.0
                // $opts['settings']['title'] = $form->get("title")->value;
                // $opts['settings']['subject_line'] = $form->get("subject_line")->value;
                // $opts['settings']['from_name'] = $form->get("from_name")->value;
                // $opts['settings']['reply_to'] = $form->get("reply_to")->value;
                // $opts['settings']['to_name'] = $form->get("to_name")->value;

                // $opts['recipients']['list_id'] = $form->get("list_id")->value;

                // if($form->get("list_id")->value) {
                //     $listSegmentName = "segment_" . $form->get("list_id")->value;
                //     if($form->get($listSegmentName) && $form->get($listSegmentName)->value){
                //         $opts['recipients']['segment_opts']['saved_segment_id'] = (int) $form->get($listSegmentName)->value;
                //     }
                // }

                // Mailchimp V2.0

                $opts['options']['title'] = $form->get("title")->value;
                $opts['options']['list_id'] = $form->get("list_id")->value;

                if($form->get("list_id")->value) {
                    $listSegmentName = "segment_" . $form->get("list_id")->value;
                    if($form->get($listSegmentName) && $form->get($listSegmentName)->value){
                        $opts['segment_opts']['saved_segment_id'] = (int) $form->get($listSegmentName)->value;
                    }
                }

                $opts['options']['subject'] = $form->get("subject_line")->value;
                $opts['options']['from_email'] = $form->get("reply_to")->value;
                $opts['options']['from_name'] = $form->get("from_name")->value;
                $opts['options']['to_name'] = $form->get("to_name")->value;

                $opts['options']['generate_text'] = true;
                $opts['options']['tracking']['opens'] = true;
                $opts['options']['tracking']['html_clicks'] = true;
                $opts['options']['tracking']['text_clicks'] = false;

                $opts['content']['url'] = $newsletterPageUrl;

                // @TODO: v3.0
                // $res = $this->mailchimp->_post("campaigns", $opts);

                // if($res && isset($res['id'])){
                //     $this->mailchimp->_put("campaigns/{$res['id']}/content", array("url" => $newsletter_url));
                //     $this->_insert($newsletterPageID, $newsletter_url, $res['id'], $opts['recipients']['list_id']);
                //     $this->message(sprintf($this->_("New campaign '%s' created on MailChimp"), $opts['settings']['title']));
                //     $this->session->redirect("../edit/?id={$res['id']}");
                // }

                // Mailchimp 2.0
                $campaign = $this->mailchimp->call("campaigns/create", $opts);

                if($campaign && $campaign['id']){
                    $this->_insert($newsletterPageID, $newsletterPageUrl, $campaign['id'], $opts['options']['list_id'], $opts['segment_opts']['saved_segment_id']);
                    $this->session->redirect("../edit/?id=" . $campaign['id']);
                }

            }
        } else {
            $form = $this->_buildAddForm();
        }

        return $form->render();
    }


    /**
     * Show stats for the sent campaign
     */
    public function executeStats(){

        $this->fuel->breadcrumbs->add(new Breadcrumb('../', 'Campaigns'));

        $campaign_id = $this->input->get('id');
        $data = $this->mailchimp->call("campaigns/list", array("filters" => array("campaign_id" => $campaign_id)));

        $title = sprintf($this->_('Campaign Stats: %s'),$data['data'][0]['title']);
        $this->fuel->set('processHeadline', $title);

        $retval = $this->mcapi->campaignStats($campaign_id);

        if(!$this->_checkErrorMC()){
            $this->error($this->_("Could not retrieve Campaign Stats!"));
        }

        $form = $this->modules->get("InputfieldForm");
        $form->attr("id+name","CampaignStatsForm");
        $form->attr("action","#");
        $form->attr('id',$this->className());

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . $this->_("CampaignStats1"));
        $wrapper->attr("title", $this->_("Sent and opened"));
        $field = $this->modules->get("InputfieldMarkup");
        $field->value .= "<div class='MC_stats'>";
        $field->value .= "<p class='MC_stat'><span>{$retval['emails_sent']}</span>Emails sent</p>";
        $field->value .= "<p class='MC_stat'><span>{$retval['opens']}</span>Opens</p>";
        $field->value .= "<p class='MC_stat'><span>{$retval['unique_opens']}</span>Unique opens</p>";
        $lastOpenDate = $retval['last_open'] ? $this->dateGmtToLocal($retval['last_open']) : "N/A";
        $field->value .= "<p class='MC_stat'><span class='date'>" . $lastOpenDate . "</span>Last opened<br/></p>";

        $geoStats = $this->mailchimp->call("reports/geo-opens", array("cid" => $campaign_id));
        $table = wire("modules")->MarkupAdminDataTable;
        $table->setEncodeEntities(false);
        $table->headerRow(array(
            "",
            "",
        ));
        foreach($geoStats as $geo){
            $table->row(array("<b>{$geo['opens']}</b>", $geo['name'] . " " . $geo['code']));
        }
        $field->value .= $table->render();

        $field->value .= "</div>";
        $wrapper->add($field);
        $form->add($wrapper);


        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . $this->_("CampaignStats2"));
        $wrapper->attr("title", $this->_("Clicks and bounces"));
        $field = $this->modules->get("InputfieldMarkup");
        $field->value .= "<div class='MC_stats'>";
        $field->value .= "<p class='MC_stat'><span>{$retval['clicks']}</span>User clicks</p>";
        $field->value .= "<p class='MC_stat'><span>{$retval['unique_clicks']}</span>Unique clicks</p>";
        $field->value .= "<p class='MC_stat'><span>{$retval['hard_bounces']}</span>Hard bounces</p>";
        $field->value .= "<p class='MC_stat'><span>{$retval['soft_bounces']}</span>Soft bounces</p>";
        $field->value .= "</div>";

        $clickStats = $this->mailchimp->call("reports/clicks", array("cid" => $campaign_id));
        $table = wire("modules")->MarkupAdminDataTable;
        $table->setEncodeEntities(false);
        $table->headerRow(array(
            "",
            "",
        ));
        foreach($clickStats['total'] as $click){
            $table->row(array("<b>{$click['clicks']}</b>", $click['url']));
        }
        $field->value .= $table->render();

        $wrapper->add($field);
        $form->add($wrapper);


        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . $this->_("CampaignContent"));
        $wrapper->attr("title", $this->_("Campaign Infos & Content"));
        $field = $this->modules->get("InputfieldMarkup");

        // $data = $this->mailchimp->call("campaigns/content", array("cid" => $campaign_id));

        $url = $this->pages->get("name=mailchimp-campaigns")->url;
        $field->value .= "<div class='MC_iframe'>";
        $field->value .= "<h2>Details</h2>";


        $newsletter_id = $this->_getNewsletterPageID($campaign_id);
        $newsletterPage = $this->pages->get((int) $newsletter_id);

        if($newsletterPage->id){
            $table = wire("modules")->MarkupAdminDataTable;
            $table->setEncodeEntities(false);
            $table->headerRow(array(
                "",
                "",
            ));
            $pageEditUrl = wire("config")->urls->admin . "page/edit/?id=$newsletter_id";
            $newsletter_url = $this->_getNewsletterURL($campaign_id);
            $table->row(array("<b>Newsletter Page</b>", "<a href='$pageEditUrl' target='_blank'>{$newsletterPage->title}</a>"));
            $table->row(array("<b>URL</b>", "<a href='$newsletter_url' target='_blank'>$newsletter_url</a>"));
            $field->value .= $table->render();
        }


        $table = wire("modules")->MarkupAdminDataTable;
        $table->setEncodeEntities(false);
        $table->headerRow(array(
            "",
            "",
        ));
        $table->row(array("<b>Title</b>", $data['data'][0]['title']));
        $table->row(array("<b>Edited by</b>", $data['data'][0]['content_edited_by']));
        $table->row(array("<b>Type</b>", $data['data'][0]['type']));
        $table->row(array("<b>Created</b>", $this->dateGmtToLocal($data['data'][0]['create_time'])));
        $table->row(array("<b>Send Time</b>", $this->dateGmtToLocal($data['data'][0]['send_time'])));
        $table->row(array("<b>Status</b>", $data['data'][0]['status']));
        $table->row(array("<b>From name</b>", $data['data'][0]['from_name']));
        $table->row(array("<b>From email</b>", $data['data'][0]['from_email']));
        $table->row(array("<b>Subject</b>", $data['data'][0]['subject']));
        $table->row(array("<b>To name</b>", $data['data'][0]['to_name']));
        $table->row(array("<b>Emails sent</b>", $data['data'][0]['emails_sent']));
        $table->row(array("<b>Segment text</b>", $data['data'][0]['segment_text']));
        $field->value .= $table->render();

        $field->value .= "<h2>HTML View</h2>";
        $field->value .= "<iframe style='width:100%; height:800px' src='{$url}campaigncontent/?id=$campaign_id&amp;html=1&iframe&modal=1'></iframe>";
        $field->value .= "<h2>Plain Text View</h2>";
        $field->value .= "<iframe style='width:100%; height:800px' src='{$url}campaigncontent/?id=$campaign_id&amp;text=1&iframe&modal=1'></iframe>";
        $field->value .= "</div>";
        $wrapper->add($field);
        $form->add($wrapper);

        return $form->render();
    }

    /**
     * Preview Email Newsletter
     */
    public function executeCampaigncontent(){
        $id = $this->input->get('id');
        $html = $this->input->get('html');
        $api = new MCAPI($this->apikey);
        $content = $api->campaignContent($id, false);
        if($html == 1) {
            echo $content['html'];
        } else {
            echo nl2br($content['text']);
        }
        exit();
    }


    /**
     * get all campaigns
     * @return MarkupAdminDataTable table of campaigns
     */
    public function _campaignsTable(Array $campaigns){

        // print_r($campaigns);

        $table = $this->modules->get("MarkupAdminDataTable");
        $table->headerRow(array(
            "Title",
            "List",
            "Segment",
            "Status",
            "Type",
            "created",
            "Send Time",
            "Sent to",
            "ID",
            "Folder",
            "Action"
            ));

        // create folders array to easy map campaigns folders id getting the name of the folder
        // $folders = $this->mailchimp->_get("campaign-folders");
        $folders = $this->mailchimp->call("folders/list", array("type" => "campaign"));
        $foldersMap = array();
        foreach($folders as $f){
            $foldersMap[$f['folder_id']] = $f['name'];
        }

        // create list array to easy map campaigns lists id getting the name of the list
        // $lists = $this->mailchimp->_get("lists");
        $lists = $this->mailchimp->call("lists/list");
        $listsMap = array();
        foreach($lists['data'] as $list){
            $listsMap[$list['id']] = $list['name'];
        }

        foreach($campaigns as $ca) {

            if($ca['status'] == 'sent') {
                $action_name = $this->_("stats");
                $action = $this->moduleUrl . "stats/?id=" . $ca['id'];
            } else if($ca['status'] == 'sending'){
                $action_name = $this->_("sending...");
                $action = null;
            } else {
                $action_name = $this->_("edit");
                $action = $this->moduleUrl . "edit/?id=" . $ca['id'];
            }


            $list_name = "";
            if(isset($listsMap[$ca['list_id']])){
                $list_name = $listsMap[$ca['list_id']];
            }
            $folder_name = "-";
            if(isset($foldersMap[$ca['folder_id']])){
                $folder_name = $foldersMap[$ca['folder_id']];
            }

            // segment informations if campaign uses segment
            $segment_members_count = "";
            $segment_name = isset($ca['saved_segment']['name']) ? $ca['saved_segment']['name'] : "";

            if($segment_name){
                $segmentTest = $this->mailchimp->call("campaigns/segment-test", array(
                    "list_id" => $ca['list_id'],
                    "options" => array("saved_segment_id" => $ca['saved_segment']['id']),
                    ));
                if($segmentTest){
                    $segment_members_count = $segmentTest['total'];
                    $segment_name .= " ($segment_members_count members)";
                }
            }

            $title = $ca['title'];
            if(!$title) $title = $this->_("No name defined");
            $table->row(array(
                $title => "$action",
                $list_name,
                $segment_name,
                $ca['status'],
                $ca['type'],
                $created = $ca['create_time'] ? $this->dateGmtToLocal($ca['create_time']) : "-",
                $sendtime = $ca['send_time'] ? $this->dateGmtToLocal($ca['send_time']) : "-",
                $ca['emails_sent'],
                $ca['id'],
                $folder_name,
                $action_name => "$action"
            ));
        }

        return $table;
    }

    protected function _buildEditForm($data = array()) {

        $campaign_id = $data['id'];
        $is_scheduled = $data['status'] == "schedule";

        // print_r($data);
        // check if newsletter exists in PW DB, if not we insert it
        $exists = $this->_exists($campaign_id);
        if(!$exists) {
            $this->_insert(NULL, NULL, $campaign_id, $data["list_id"], $data['saved_segment']['id']);
        }


        $form = $this->modules->get("InputfieldForm");
        $form->action = "../edit/?id=$campaign_id";
        $form->method = "post";
        $form->attr('id',$this->className());

        $field = $this->modules->get('InputfieldHidden');
        $field->attr('name', 'id');
        $field->attr('value', $campaign_id);
        $form->append($field);

        // build tabs
        $wrapper_settings   = $this->_buildSettingsTab($data);
        $wrapper_content    = $this->_buildContentTab($data);
        $wrapper_test       = $this->_buildSendTestTab($data);
        $wrapper_send       = $this->_buildSendTab($data);
        $wrapper_schedule   = $this->_buildScheduleTab($data);
        $wrapper_delete     = $this->_buildDeleteTab($data);

        $form->add($wrapper_settings);
        $form->add($wrapper_content);

        if($data['status'] != 'sent' && $data['status'] != 'sending') {
            $form->add($wrapper_test);
            $form->add($wrapper_schedule);
            $form->add($wrapper_send);
            $form->add($wrapper_delete);

        } else if($data['status'] == 'sent'){
            /**
             * Tab Reports
             */
            $retval = $this->mcapi->campaignStats($campaign_id);
            if(!$this->_checkErrorMC()){
                $this->error($this->_("Could not retrieve Campaign Stats!"));
            }
            $wrapper_stats = new InputfieldWrapper();
            $wrapper_stats->attr("id", $this->className() . $this->_("CampaignStats"));
            $wrapper_stats->attr("title", $this->_("Campaign Stats"));

            $fieldset = $this->modules->get("InputfieldFieldset");
            $fieldset->label = $this->_("Campaign Stats");

            $field = $this->modules->get("InputfieldMarkup");
            $field->value = print_r($retval);

            $fieldset->append($field);
            $wrapper_stats->add($fieldset);
            $form->add($wrapper_stats);
        }

        /**
         * update button
         */
        $save = $this->modules->get("InputfieldSubmit");
        $save->value = $this->_("Update Campaign");
        $save->attr("id+name", "submit");
        $save->attr("class", $save->class . " head_button_clone");

        $form->add($save);

        return $form;
    }


    protected function _buildSettingsTab($data){

        $wrapper_settings = new InputfieldWrapper();
        $wrapper_settings->attr("id", $this->className() . "Settings");
        $wrapper_settings->attr("title", $this->_("Settings"));

        $field = $this->modules->get("InputfieldText");
        $field->attr('id+name', "title");
        $field->label = $this->_("Campaign name");
        $field->description = $this->_("Please enter a name for the newsletter, for internal use only.");
        $field->required = 1;
        $field->maxlength = 150;
        $field->attr('value', $data['title']);
        $wrapper_settings->add($field);


        $field = $this->modules->get("InputfieldSelect");
        $field->attr('name',"list_id");
        $field->label = $this->_("Email List");
        $field->description = $this->_("Change E-mail List.");
        $field->notes = $this->_("NOTE: If you change the list here, the list's default settings will be entered as you defined them in Mailchimp.");
        $field->required = 1;

        $lists = $this->mailchimp->_get("lists");

        if(is_array($lists["lists"])){
            $field->addOption("", "");
            $segmentsArray = array();

            foreach($lists["lists"] as $l){

                $listSegments = $this->mailchimp->_get("lists/{$l['id']}/segments");
                $segmentsCount = count($listSegments['segments']);
                if($segmentsCount){
                    foreach($listSegments['segments'] as $segment){
                        $segmentTest = $this->mailchimp->call("campaigns/segment-test", array(
                                "list_id" => $l['id'],
                                "options" => array("saved_segment_id" => $segment['id']),
                            ));
                        if(isset($segmentTest['total'])) $segment['name'] .= " ({$segmentTest['total']} members)";
                        $segmentsArray[$l['id']][$segment['id']] = $segment['name'];
                    }
                }

                $listName = $l['name'];
                $listName .= $segmentsCount ? " ( " . sprintf($this->_("%s segments"), $segmentsCount) . " )" : "";
                $field->addOption($l['id'], $listName, array(
                                "data-from_name" => $l['campaign_defaults']['from_name'],
                                "data-reply_to" => $l['campaign_defaults']['from_email'],
                                "data-subject_line" => $l['campaign_defaults']['subject'],
                                ));
            }
        }

        $field->attr('value', $data['list_id']);
        $wrapper_settings->add($field);

        foreach($segmentsArray as $listID => $seg) {

            $segField = wire("modules")->InputfieldSelect;
            $segField->attr("name", "segment_" . $listID);
            $segField->label = $this->_("Segment(s)");
            $segField->columnWidth = 100;
            $segField->showIf = "list_id=$listID";

            foreach($seg as $sID => $se) $segField->addOption($sID, $se);

            if(isset($data['saved_segment']["id"])){
                $segField->attr("value", $data['saved_segment']["id"]);
            }
            $wrapper_settings->add($segField);
        }


        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"subject_line");
        $field->label = $this->_("'subject line'");
        $field->description = $this->_("Email subject for your campaign message. Keep it relevant and non-spammy.");
        $field->description .= " " . $this->_("[Infos](http://kb.mailchimp.com/campaigns/previews-and-tests/best-practices-for-email-subject-lines)");
        $field->required = 1;
        $field->maxlength = 150;
        $field->attr('value',$data['subject']);
        $wrapper_settings->add($field);

        $field = $this->modules->get("InputfieldEmail");
        $field->attr('name',"reply_to");
        $field->label = $this->_("'from' email");
        $field->description = $this->_("This is the address people will send replies to. Make sure someone actually checks this email account.");
        $field->notes = $this->_("Some email services block spam by responding to emails with a challenge question that asks the sender to complete a simple task that proves they are not a spam bot. If the reply-to email address you provide is not frequently checked, you could miss these challenge response emails, and therefore decrease your delivery rate.");
        $field->required = 1;
        $field->maxlength = 100;
        $field->attr('value',$data['from_email']);
        $wrapper_settings->add($field);

        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"from_name");
        $field->label = $this->_("'from name'");
        $field->notes = $this->_("This is the name your emails will come from. Use something your subscribers will instantly recognize, like your company name.");
        $field->required = 1;
        $field->maxlength = 100;
        $field->attr('value',$data['from_name']);
        $wrapper_settings->add($field);

        $field = $this->modules->get("InputfieldText");
        $field->attr('name', "to_name");
        $field->label = $this->_("'to name'");
        $field->notes = $this->_("Include the recipient’s name in the message using merge tags to make it more personal and help avoid spam filters. For example, *|FNAME|* *|LNAME|* will show 'To: Bob Smith' in the email instead of 'To: bob@example.com'. This is more personal and may help avoid spam filters.");
        $field->required = 0;
        $field->entityEncodeText = false;
        $field->maxlength = 100;
        $field->attr('value', $data['to_name']);
        $wrapper_settings->add($field);

        return $wrapper_settings;
    }


    protected function _buildContentTab($data){

        $campaign_id = $data['id'];
        $newsletter_url = $this->_getNewsletterURL($campaign_id);

        $newsletter_title = "";
        $newsletter_id = $this->_getNewsletterPageID($campaign_id);
        $newsletterPage = $this->pages->get((int) $newsletter_id);
        if($newsletterPage->id){
            $newsletter_title = $newsletterPage->title;
        }

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . "EmailContent");
        $wrapper->attr("title", $this->_("Email Content"));

        // newletter page
        $field = $this->modules->get("InputfieldPageListSelect");
        $field->attr('name',"newsletter_id");
        $field->label = $this->_("Newsletter Page");
        $editLink = '';
        if($newsletter_id) $editLink = "<[ " . $this->_("edit Newsletter Page") . " ](/processwire/page/edit/?id=$newsletter_id) >";
        $field->description = sprintf($this->_('Choose a newsletter from the list. %s'), $editLink);
        $field->parent_id = $this->mailchimp->newsletter_parent_id;
        $field->derefAsPage = 0;
        $field->labelFieldName = "title";
        $page_required = 1;
        // make the field required only if newsletter_url is not entered
        if(!$this->mailchimp->newsletter_parent_id){
            $this->message($this->_("Newsletter Parent Page ID not specified in MailChimpNewsletter module settings. You still can alternatively enter a URL below."));
        }

        $field->required = $page_required;
        $field->attr('value', $newsletter_id);
        $wrapper->add($field);

        // newsletter url
        $field = $this->modules->get("InputfieldURL");
        $field->attr('name',"newsletter_url");
        $field->label = $this->_("Newsletter URL");
        $field->description = $this->_("The public URL for the email content.");
        $field->entityEncodeText = false;
        $url_required = 1;
        if($newsletterPage->id){
            $field->description .= "<br>" . $this->_("Available URLs for this page") . ":";
            $urls = wire("modules")->MailChimpNewsletter->getNewsletterUrlsArray($newsletterPage);
            foreach($urls as $langID => $url){
                $field->description .= "<br>" . $url['url'];
            }
        }

        $field->required = $url_required;
        $field->attr('value', $newsletter_url);
        $wrapper->add($field);

        $url = $this->pages->get("name=mailchimp-campaigns")->url;

        $preview = $this->modules->get("InputfieldMarkup");
        $preview->label = $this->_("Preview");
        $preview->description = $this->_("Preview the generated newsletter that will be sent");
        $preview->attr('id',"MC_NewsletterPreview");

        $button = $this->modules->get("InputfieldButton");
        $button->attr("id", "MC_NewsletterPreviewHtml");
        $button->attr("value",$this->_("HTML Email"));
        $button->attr('href',"{$url}campaigncontent/?id=$campaign_id&amp;html=1&iframe&modal=1");
        $preview->value = $button->render();

        $button = $this->modules->get("InputfieldButton");
        $button->attr("id", "MC_NewsletterPreviewText");
        $button->attr("value",$this->_("Text Email"));
        $button->attr('href',"{$url}campaigncontent/?id=$campaign_id&amp;html=0&iframe&modal=1");
        $preview->value .= $button->render();

        $wrapper->add($preview);

        return $wrapper;
    }


    protected function _buildSendTestTab($data){

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . "SendTest");
        $wrapper->attr("title", $this->_("Send Test"));

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->label = $this->_("Send Test Email");

        $field = $this->modules->get("InputfieldText");
        $field->label = $this->_("Test Email Address");
        $field->description = $this->_("Enter multiple E-Mails comma separated");
        $field->notes = sprintf($this->_('Tests sent: %1$s, Tests remaining: %2$s. (limit per day)'), $data['tests_sent'],$data['tests_remain']);
        $field->attr("id+name","email_test");
        $field->required = 1;
        $fieldset->append($field);

        $field = $this->modules->get("InputfieldSubmit");
        $field->value = $this->_("Send Test");
        $field->attr("id+name", "sendtest");

        $fieldset->append($field);
        $wrapper->add($fieldset);

        return $wrapper;
    }


    protected function _buildSendTab($data){

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . "SendCampaign");
        $wrapper->attr("title", $this->_("Send Campaign"));

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->label = $this->_("Send Campaign");

        $field = $this->modules->get("InputfieldSubmit");
        $field->value = $this->_("Send Campaign now");
        $field->attr("id+name", "sendcampaign");

        $fieldset->append($field);
        $wrapper->add($fieldset);

        return $wrapper;

    }

    protected function _buildScheduleTab($data){

        $is_scheduled = $data['status'] == "schedule";
        if($is_scheduled) {
            $scheduleDateLocal = $this->dateGmtToLocal($data['send_time']);
            $scheduleDate = date("Y-m-d", strtotime($scheduleDateLocal));
            $scheduleHour = date("H", strtotime($scheduleDateLocal));
            $scheduleMin = date("i", strtotime($scheduleDateLocal));
            $scheduleDateStr = $scheduleDate . " " . $scheduleHour . ":" . $scheduleMin;
        }

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . "ScheduleCampaign");
        $wrapper->attr("title", $this->_("Schedule Campaign"));

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->label = $this->_("Schedule Campaign");

        $field = $this->modules->get("InputfieldMarkup");
        $field->label = __("Schedule Date");
        $field->attr("name", "schedule_datestr");
        $field->attr("value", $is_scheduled ? $scheduleDateStr : __("No schedule set"));
        $fieldset->append($field);

        $field = $this->modules->get("InputfieldDatetime");
        $field->label = __("Schedule Date");
        $field->attr("name", "schedule_date");
        $field->attr("value", $scheduleDate);
        $field->datepicker = InputfieldDatetime::datepickerClick;
        $field->columnWidth = 33;
        $fieldset->append($field);

        $field = $this->modules->get("InputfieldSelect");
        $prepend = array('00','01','02','03','04','05','06','07','08','09');
        $rangeHours = array_merge($prepend, range(10,23));
        foreach($rangeHours as $hour) $field->addOption($hour);
        $field->label = __("Schedule Hour");
        $field->attr("name", "schedule_hour");
        $field->attr("value", $scheduleHour);
        $field->columnWidth = 33;
        $fieldset->append($field);

        $field = $this->modules->get("InputfieldSelect");
        $rangeMin = array('00','15','30','45');
        foreach($rangeMin as $min) $field->addOption($min);
        $field->label = __("Schedule Min");
        $field->attr("name", "schedule_min");
        $field->attr("value", $scheduleMin);
        $field->columnWidth = 33;
        $fieldset->append($field);


        $field = $this->modules->get("InputfieldSubmit");
        $field->value = $this->_("Save Schedule");
        $field->attr("id+name", "schedulecampaign");
        $fieldset->append($field);

        $field = $this->modules->get("InputfieldSubmit");
        $field->value = $this->_("Unschedule");
        $field->attr("id+name", "unschedulecampaign");
        $fieldset->append($field);

        $wrapper->add($fieldset);

        return $wrapper;

    }

    protected function _buildDeleteTab($data){

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . "DeleteCampaign");
        $wrapper->attr("title", $this->_("Delete Campaign"));

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->label = $this->_("Delete Campaign");

        $field = $this->modules->get("InputfieldSubmit");
        $field->value = $this->_("Delete Campaign now");
        $field->attr("id+name", "deletecampaign");

        $fieldset->append($field);
        $wrapper->add($fieldset);

        return $wrapper;
    }


    protected function _buildAddForm() {

        $form = $this->modules->get("InputfieldForm");
        $form->action = "../add/";
        $form->method = "post";
        $form->attr('id',$this->className());

        $field = $this->modules->get("InputfieldText");
        $field->attr('name', "title");
        $field->label = $this->_("Campaign name");
        $field->description = $this->_("Please enter a title for the newsletter. Internal use only.");
        $field->required = 1;

        // set pageID from url parameter? this is when coming from newletter page "create" link
        $langTitle = "";
        if(wire("input")->get->nlid) {
            if(count(wire("languages")) > 1) {
                $savedLang = wire("user")->language;
                $lang = wire("languages")->get((int) wire("input")->get->nllang);
                if($lang->id) {
                    wire("user")->language = $lang;
                    $nlPage = wire("pages")->get((int) wire("input")->get->nlid);
                    $langTitle = (string) $nlPage->title;
                }
                wire("user")->language = $savedLang;
            }
        }
        $field->attr("value", $langTitle);
        $form->add($field);


        $field = $this->modules->get("InputfieldSelect");
        $field->attr('name',"list_id");
        $field->label = $this->_("Email List");
        $field->description = $this->_("Please choose an E-mail List. After selecting a List more fields will appear below.");
        $field->notes = $this->_("The List's default settings will be entered as you defined them in Mailchimp.");
        $field->required = 1;
        $field->columnWidth = 100;

        $lists = $this->mailchimp->_get("lists");


        if(is_array($lists["lists"])){
            $field->addOption("", "");

            $segmentsArray = array();

            foreach($lists["lists"] as $l){
                $listSegments = $this->mailchimp->_get("lists/{$l['id']}/segments");

                // print_r($listSegments);
                $segmentsCount = count($listSegments['segments']);

                if($segmentsCount){
                    foreach($listSegments['segments'] as $segment){
                        $segmentTest = $this->mailchimp->call("campaigns/segment-test", array(
                            "list_id" => $l['id'],
                            "options" => array("saved_segment_id" => $segment['id']),
                            ));
                        if(isset($segmentTest['total'])) $segment['name'] .= " ({$segmentTest['total']} members)";
                        $segmentsArray[$l['id']][$segment['id']] = $segment['name'];
                    }
                }

                $listName = $l['name'];
                $listName .= $segmentsCount ? " ( " . sprintf($this->_("%s segments"), $segmentsCount) . " )" : "";

                $field->addOption($l['id'], $listName, array(
                        "data-from_name" => $l['campaign_defaults']['from_name'],
                        "data-reply_to" => $l['campaign_defaults']['from_email'],
                        "data-subject_line" => $l['campaign_defaults']['subject'],
                    ));
            }
        }

        $form->add($field);

        foreach($segmentsArray as $listID => $seg){
            $segField = wire("modules")->InputfieldSelect;
            $segField->attr("name", "segment_" . $listID);
            $segField->label = $this->_("Segment(s)");
            $segField->columnWidth = 100;
            $segField->showIf = "list_id=$listID";
            foreach($seg as $sID => $s) $segField->addOption($sID, $s);
            $form->add($segField);
        }

        $fieldset = $this->modules->InputfieldFieldset;
        $fieldset->label = $this->_("Enter E-mail Campaign Details");
        $fieldset->showIf = "list_id!=''";

        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"subject_line");
        $field->label = $this->_("'subject line'");
        $field->description = $this->_("Email subject for your campaign message. Keep it relevant and non-spammy.");
        $field->description .= " " . $this->_("[Infos](http://kb.mailchimp.com/campaigns/previews-and-tests/best-practices-for-email-subject-lines)");
        $field->required = 1;
        $field->maxlength = 150;
        $fieldset->add($field);

        $field = $this->modules->get("InputfieldEmail");
        $field->attr('name',"reply_to");
        $field->label = $this->_("'from' email");
        $field->description = $this->_("This is the address people will send replies to. Make sure someone actually checks this email account.");
        $field->notes = $this->_("Some email services block spam by responding to emails with a challenge question that asks the sender to complete a simple task that proves they are not a spam bot. If the reply-to email address you provide is not frequently checked, you could miss these challenge response emails, and therefore decrease your delivery rate.");
        $field->required = 1;
        $field->maxlength = 100;
        $fieldset->add($field);

        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"from_name");
        $field->label = $this->_("'from name'");
        $field->notes = $this->_("This is the name your emails will come from. Use something your subscribers will instantly recognize, like your company name.");
        $field->required = 1;
        $field->maxlength = 100;
        $fieldset->add($field);

        $field = $this->modules->get("InputfieldText");
        $field->attr('name', "to_name");
        $field->label = $this->_("'to name'");
        $field->notes = $this->_("Include the recipient’s name in the message using merge tags to make it more personal and help avoid spam filters. For example, *|FNAME|* *|LNAME|* will show 'To: Bob Smith' in the email instead of 'To: bob@example.com'. This is more personal and may help avoid spam filters.");
        $field->required = 0;
        $field->entityEncodeText = false;
        $field->maxlength = 100;
        $fieldset->add($field);

        $form->add($fieldset);



        $fieldset = $this->modules->InputfieldFieldset;
        $fieldset->label = $this->_("Select Newsletter Page or directly enter Newsletter URL");
        // $fieldset->showIf = "list_id!=''";

        // select newletter page
        if($this->mailchimp->newsletter_parent_id){
            $field = $this->modules->get("InputfieldPageListSelect");
            $field->attr('name',"newsletter_id");
            $field->label = $this->_("Newsletter Page");
            $field->description = sprintf($this->_("Choose a newsletter page from the list. Create them in the Newsletters folder [here](/processwire/page/?open=%s)"), $this->mailchimp->newsletter_parent_id);
            $field->parent_id = $this->mailchimp->newsletter_parent_id;
            $field->template_id = 70;
            $field->derefAsPage = 0;
            $field->labelFieldName = "title";
            $page_required = 1;
            // make the field required only if newsletter_url is not entered
            // if($this->input->post->newsletter_url) $page_required = 0;
            $field->required = $page_required;
            // $field->showIf = "newsletter_url=''";
            $field->attr("value", wire("input")->get->nlid ? wire("input")->get->nlid : "");
            $fieldset->add($field);
        } else {
            $this->message($this->_("Newsletter Parent Page ID not specified in MailChimpNewsletter module settings. You still can alternatively enter a URL below."));
        }

        $field = $this->modules->get("InputfieldURL");
        $field->attr('name',"newsletter_url");
        $field->entityEncodeText = false;
        $field->label = $this->_("Newsletter URL");
        $field->description = $this->_("The public URL for the email content. This will be populated automaticly when selecting the newsletter page above.");


        if(wire("input")->get->nlid) {
            $nlid = (int) wire("input")->get->nlid;
            $nlPage = wire("pages")->get($nlid);
            if($nlPage->id){
                $field->description .= "<br>" . $this->_("Available URLs for this page") . ":";
                $urls = wire("modules")->MailChimpNewsletter->getNewsletterUrlsArray($nlPage);
                foreach($urls as $langID => $url){
                    $field->description .= "<br>" . $url['url'];
                }
            }
        }

        if(count(wire("languages")) > 1){
            $field->notes .= $this->_("We detected multiple languages. Select a Newsletter above to get available URLs and copy paste one of them.");
        }

        $url_required = 1;

        // make the field dependent on the page list select
        // if(!$this->mailchimp->newsletter_parent_id) $url_required = 1;
        // if(!$this->input->post->newsletter_id) {
        //     if($this->input->post->newsletter_url) $url_required = 1;
        // }

        // $parent_page = "";
        // if($this->mailchimp->newsletter_parent_id) {
        //     $parent_page = $this->pages->get($this->mailchimp->newsletter_parent_id);
        // }
        // if($parent_page->id) $field->placeholder = $parent_page->httpUrl;
        $field->required = $url_required;
        // $field->showIf = "newsletter_id=''";
        $field->attr("value", wire("input")->get->nlurl ? wire("input")->get->nlurl : "");
        $fieldset->add($field);

        $form->add($fieldset);

        $save = $this->modules->get("InputfieldSubmit");
        $save->value = $this->_("Create Campaign");
        $save->attr('name', "submit");
        $save->attr('class', $save->class . ' head_button_clone');


        $form->add($save);
        return $form;
    }

    protected function _getNewsletterPageID($cid) {
        $query = "SELECT * FROM {$this->className} WHERE campaign_id = '$cid';";
        $res = $this->db->query($query);
        $arr = $res->fetch_array();
        return $arr['newsletter_id'];
    }

    protected function _getNewsletterURL($cid) {
        $query = "SELECT * FROM {$this->className} WHERE campaign_id = '$cid';";
        $res = $this->db->query($query);
        $arr = $res->fetch_array();
        return $arr['newsletter_url'];
    }

    /**
     * API 1.3 Error checking
     */
    protected function _checkErrorMC($msg = '') {
        if($this->mcapi->errorCode) {
            $this->error(sprintf($this->_("ErrorCode = %s"), $this->mcapi->errorCode));
            $this->error(sprintf($this->_("ErrorMessage = %s"), $this->mcapi->errorMessage));
            return false;
        }
        return true;
    }


    protected function _insert($newsletter_id, $newsletter_url, $campaign_id, $list_id, $segment_id) {
        $newsletter_url = $this->sanitizer->url($newsletter_url);
        if($newsletter_id == 0) $newsletter_id = "NULL";
        $query = "INSERT INTO {$this->className()} (campaign_id, newsletter_id, newsletter_url, list_id, segment_id, created)
                VALUES ('$campaign_id',$newsletter_id,'$newsletter_url','$list_id', '$segment_id', now())";
        $result = $this->db->query($query);
        $this->message($this->_("New Campaign inserted/updated"));
        return @mysqli_insert_id($this->db);
    }

    protected function _update($newsletter_id, $newsletter_url, $campaign_id, $list_id, $segment_id) {
        $newsletter_url = $this->sanitizer->url($newsletter_url);
        if($newsletter_id == 0) $newsletter_id = "NULL";
        $values = "newsletter_id=" . $newsletter_id . ",";
        $values .= "newsletter_url='" . $newsletter_url . "',";
        $values .= "list_id='" . $list_id . "',";
        $values .= "segment_id='" . $segment_id . "'";
        $query = "UPDATE {$this->className} SET $values WHERE campaign_id='$campaign_id'";
        $result = $this->db->query($query);
        $this->message($this->_("Campaign updated"));
        return $result;
    }

    protected function _delete($campaign_id) {
        $query = "DELETE FROM {$this->className} WHERE campaign_id='$campaign_id'";
        $result = $this->db->query($query);
        $this->message($this->_("Campaign deleted from DB"));
        return $result;
    }

    protected function _exists($campaign_id) {
        $query = "SELECT * FROM {$this->className()} WHERE campaign_id='$campaign_id'";
        $result = $this->db->query($query);
        if($result->num_rows == 1) return true;
        return false;
    }

    public function dateGmtToLocal($gmtDate, $fromFormat = 'Y-m-d H:i:s', $toFormat = "Y-m-d H:i"){
        // echo $gmtDate; exit();
        $utc_date = DateTime::createFromFormat($fromFormat, $gmtDate, new DateTimeZone('UTC'));
        $date = $utc_date;
        $date->setTimeZone(new DateTimeZone(date_default_timezone_get()));
        return $date->format($toFormat);
    }

    public function install() {

        // db schema for saving newsletter
        $sql = <<< _END
        CREATE TABLE {$this->className} (
            id INT UNSIGNED NOT NULL AUTO_INCREMENT,
            newsletter_id INT NULL,
            newsletter_url VARCHAR(255) NULL,
            list_id VARCHAR(32) NULL,
            segment_id VARCHAR(32) NULL,
            campaign_id VARCHAR(32) NULL,
            modified TIMESTAMP NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
            created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
            PRIMARY KEY (`id`)
        )
        ENGINE = MyISAM DEFAULT CHARSET=utf8;
_END;

        $this->db->query($sql);

    }

    public function uninstall() {
        $admin = $this->pages->find("name=mailchimp-campaigns")->first();
        if($admin->id && $this->pages->delete($admin)) {
            $this->message(__("Deleted mailchimp-campaigns admin page."));
        } else {
            $this->error(__("Couldn't find mailchimp-campaigns admin page."));
        }

        $this->db->query("DROP TABLE {$this->className}");

    }

    public static function getModuleConfigInputfields(array $data) {
        // $data = array_merge(self::$defaults, $data);

        // $fields = new InputfieldWrapper();
        // $modules = wire("modules");

        // $field = $modules->get("InputfieldText");
        // $field->attr('name', 'apikey');
        // $field->attr('size', 40);
        // $field->attr('value', $data['apikey']);
        // $field->label = "MailChimp API Key";
        // $fields->append($field);

        // $field = $modules->get("InputfieldText");
        // $field->attr('name', 'remoteurl');
        // $field->attr('size', 0);
        // $field->attr('value', $data['remoteurl']);
        // $field->label = "URL to webservice";
        // $fields->append($field);

        // return $fields;
    }
}