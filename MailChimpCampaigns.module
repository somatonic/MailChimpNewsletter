<?php

/**
 * MailChimp Newsletter
 * Campaign Management
 *
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 *
 * Changelog:
 *  v.0.0.7
 *  - added config option to send newsletter html to mailchimp instead of the url
 *    language now can be set via radio options if set to "html"
 *  - added "count" show 100 (MC API call) to lists calls (default only 10)
 *
 *  v.0.0.6
 *  - bug fix with missing argument for segment id on campaing add
 *
 *  v.0.0.5
 *  - update to API 3.0
 *  - removed old code
 *  - changed from fancybox to PW modal
 *
 *  v 0.0.4 - 17.06.2016 Philipp Urlich
 *  - Added schedule send function for campaigns
 *  - Refactoring, removed old code
 *  - Fix minor issues with saving segment id in DB
 *
 */


// include API 3.0 minimal Wrapper
require_once( dirname(__FILE__) . "/MailChimp.php");

class MailChimpCampaigns extends Process implements Module, ConfigurableModule {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {

        return array(
            'title' => 'MailChimp Campaigns',
            'version' => 7,
            'summary' => 'Manage MailChimp Campaigns',
            'author' => "Philipp Urlich 'Soma'",
            'href' => '',
            'singular' => true,
            'permission' => "mailchimp",
            'permissions' => array("mailchimp" => "MailChimp Newsletter"),
            'requires' => array('MailChimpNewsletter'),
            'icon' => "envelope",
        );
    }

    const defaultContentType = "url";

    const schemaVersion = 2;

    public function __construct() {

        $this->set("contentType", self::defaultContentType);
        $this->set("schemaVersion", 0); // default

        parent::__construct();
    }


    public function init() {

        parent::init();

        $this->checkSchema();

        $this->modules->get("JqueryWireTabs");
        $this->mailchimp = $this->modules->get("MailChimpNewsletter");
        $this->apikey = $this->mailchimp->apikey;

        wire("config")->js("MailChimp", array(
                "urls" => array("MailChimpCampaigns" => wire("page")->url),
            ));

        // handle ajax loading for newletter url field when selecting a page
        if(wire("config")->ajax){

            if(wire("input")->post->getnlurl){
                $pageID = (int) wire("input")->post->pid;
                $page = wire("pages")->get($pageID);
                $response = array();
                $response['body'] = "";
                if($page->id){
                    $urls = $this->modules->MailChimpNewsletter->getNewsletterUrlsArray($page);
                    $response['body'] .= "<br>" . $this->_("Available URLs for this page") . ":";
                    foreach($urls as $key => $url){
                        $response["body"] .= "<br>" . $url['url'];
                    }
                    $response["urls"] = $urls;
                    echo json_encode($response);
                    exit;
                }
            }

        }

        $this->modulePage = $this->pages->get("template=admin, process={$this->modules->getModuleID($this->className())}, include=hidden");
        $this->moduleUrl = $this->modulePage->id ? $this->modulePage->url : "";
    }

    public function ready(){



    }

    /**
     * List campaign from mailchimp
     */
    public function execute(){

        $out = "";

        $this->fuel->set('processHeadline', 'Campaigns');
        // $out .= "<h2>" . $this->_("Campaigns") . "</h2>";

        $folders_list = '';
        $folders = $this->mailchimp->_get("campaign-folders", array("count" => 50));

        $form = wire("modules")->InputfieldForm;
        $form->attr("action", "");
        $form->attr("method", "post");

        if(count($folders['folders'])){
            $foldersFilter = wire("modules")->InputfieldSelect;
            $foldersFilter->label = __("Folders");
            $foldersFilter->attr("name", "folder_id");
            $foldersFilter->addOption("", __("All Folders"));
            foreach($folders['folders'] as $f){
                $foldersFilter->addOption($f['id'], $f['name'] . " ({$f['count']})");
            }
            $foldersFilter->attr("value", wire("input")->get->folder_id);
            $form->add($foldersFilter);
        }

        $folders_list = $form->render();

        $add = $this->modules->get("InputfieldButton");
        $add->attr("value",$this->_("Create new Campaign"));
        $add->attr('class', $add->class . ' head_button_clone');
        $add->attr('href', "./add/");

        $options = array();

        if(wire("input")->get->folder_id){
            $options["folder_id"] = (int) wire("input")->get->folder_id;
            $this->input->whitelist("folder_id", wire("input")->get->folder_id);
        }

        $limit = 20;
        $start = $this->input->pageNum - 1;
        $startCount = $start * $limit;
        // $options["since_create_time"] = date("c", strtotime("-1year"));
        $options["count"] = $limit;
        $options["offset"] = $startCount;
        $options['sort_field'] = "create_time";
        $options['sort_dir'] = "DESC";
        $retval = $this->mailchimp->_get("campaigns", $options);

        if(count($retval['campaigns'])){
            $campaignTable = $this->_campaignsTable($retval['campaigns'])->render();
        } else {
            $campaignTable = $this->_("No campaigns");
        }

        $pagination = new PageArray();
        $pagination->setTotal($retval["total_items"]);
        $pagination->setLimit($limit);
        $pagination->setStart($startCount);

        $total = "<p>Total: " . $retval['total_items'] . "</p>";
        $content = "<div class='campaigns-result'>$campaignTable</div>";
        $content .= $pagination->renderPager();
        $content .= $total;
        $out .= $folders_list . $content . $add->render();

        return $out;

    }

    /**
     * edit the campaign
     * preview campaign
     * send tests
     * send campaign
     * schedule campaign
     * delete campaign
     */
    public function executeEdit() {

        $this->fuel->breadcrumbs->add(new Breadcrumb('../', 'Campaigns'));
        $this->fuel->set('processHeadline', 'Edit Campaign');

        $campaign_id = $this->input->get->id;
        if(!$campaign_id){
            return "<p>" . $this->_("No campaign ID specified") . "</p>";
        }

        $campaignData = $this->mailchimp->_get("campaigns/$campaign_id");

        if(!$campaignData) {
            return "<p>" . $this->_("No campaign found") . "</p>";
        }

        // build the edit form with multiple tabs
        $form = $this->_buildEditForm($campaignData);

        // update campaign when submited
        if($this->input->post->submit) {

            $form->email_test->required = 0;
            $form->processInput($this->input->post);

            if(!count($form->getErrors())) {

                $opts = array(
                    "recipients" => array(
                        "list_id" => $form->get("list_id")->value,
                        ),
                    "settings" => array(
                        "title" => $form->get("title")->value,
                        "subject_line" => $form->get("subject_line")->value,
                        "reply_to" => $form->get("reply_to")->value,
                        "from_name" => $form->get("from_name")->value,
                        "to_name" => $form->get("to_name")->value,
                        )
                    );

                $listSegmentID = $form->get("segment_" . $form->get("list_id")->value)->value;
                if($listSegmentID){
                    $opts['recipients']['segment_opts']['saved_segment_id'] = (int) $listSegmentID;
                }

                $newsletterPageUrl = $form->get("newsletter_url") ? $form->get("newsletter_url")->value : null;
                $newsletterLangID = $form->get("newsletter_lang") ? $form->get("newsletter_lang")->value : null;
                $newsletterPageID = (int) $form->get("newsletter_id")->value;

                $res = $this->mailchimp->_patch("campaigns/$campaign_id", $opts);

                if($res && isset($res['id'])){
                    if($this->contentType == "url") {
                        $this->mailchimp->_put("campaigns/$campaign_id/content", array(
                                "url" => $newsletterPageUrl,
                        ));
                    }
                    if($this->contentType == "html") {
                        if($this->wire("languages") && count($this->wire("languages")) > 1) {
                            $lang = $this->wire("languages")->get($newsletterLangID);
                            $_savedlang = $this->wire("user")->language;
                            $this->wire("user")->language = $lang;
                            $newsletterHtml = $this->wire("pages")->get($newsletterPageID)->render();
                            $this->wire("user")->language = $_savedlang;
                        } else {
                            $newsletterHtml = $this->wire("pages")->get($newsletterPageID)->render();
                        }

                        if($newsletterHtml) {
                            $res2 = $this->mailchimp->_put("campaigns/{$res['id']}/content", array(
                                    "html" => $newsletterHtml
                                ));
                        } else {
                            $this->error("No html could be rendered and sent to MailChimp.");
                        }
                    }

                    $this->_update($newsletterPageID, $newsletterPageUrl, $newsletterLangID, $campaign_id, $form->get("list_id")->value, $listSegmentID);
                    $this->message($this->_('Campaign updated.'));

                } else {
                    $this->error($this->_('Campaign could not be updated.'));
                }

                $this->session->redirect("../edit/?id=$campaign_id");
            }
        }

        // send test email
        if($this->input->post->sendtest){
            // process form
            $form->processInput($this->input->post);
            // if no error
            if(!$form->getErrors()){

                if(strpos($form->get("email_test")->value, ",") !== false){
                    $emails = explode(",", $form->get("email_test")->value);
                } else {
                    $emails = array($form->get("email_test")->value);
                }
                $retval = $this->mailchimp->_post("campaigns/$campaign_id/actions/test", array(
                    "test_emails" => $emails,
                    "send_type" => "html",
                    ));

                if(!$retval){
                    $this->error($this->_("Unable to Send Test Campaign!"));
                } else {
                    foreach($emails as $email){
                        $this->message(sprintf($this->_("Campaign Test sent to '%s'!"), $email));
                    }
                }
                $this->session->redirect($page->url . "?id=" . $campaign_id);
            }
        }

        // send campaign email
        if($this->input->post->sendcampaign){

            $form->email_test->required = 0;
            $form->processInput($this->input->post);

            if(!$form->getErrors()){
                $emails = array($this->input->post->email_test);
                $retval = $this->mailchimp->_post("campaigns/$campaign_id/actions/send");

                $newsletter_id = $this->_getNewsletterPageID($campaign_id);
                $newsletter_page = $this->pages->get((int)$newsletter_id);

                if(!$retval){
                    $this->error($this->_("Unable to Send Campaign!"));
                } else {
                    if($newsletter_page->id){
                        $newsletter_page->sent = 1;
                        $newsletter_page->save();
                    }
                    $this->message($this->_("Campaign Sent!"));
                }
            }
        }

        // schedule campaign
        if($this->input->post->schedulecampaign){

            $form->email_test->required = 0;
            $form->schedule_date->attr("value", $this->input->post->schedule_date);
            $form->schedule_hour->attr("value", $this->input->post->schedule_hour);
            $form->schedule_min->attr("value", $this->input->post->schedule_min);

            $scheduleDate = $this->input->post->schedule_date;
            if(!$scheduleDate) {
                $form->schedule_date->error("No Schedule 'Date' specified!");
            }

            $scheduleHour = $this->input->post->schedule_hour;
            if(!$scheduleHour) {
                $form->schedule_hour->error("No Schedule 'Hour' specified!");
            }

            $scheduleMin = $this->input->post->schedule_min;
            if(!$scheduleMin) {
                $form->schedule_min->error("No Schedule 'Minutes' specified!");
            }

            if($scheduleDate && $scheduleHour && $scheduleMin) {
                // $this->mailchimp->_post("/campaigns/{$campaign_id}/actions/unschedule");

                $utcDate = gmdate("c", strtotime("$scheduleDate $scheduleHour:$scheduleMin"));
                $this->mailchimp->_post("/campaigns/{$campaign_id}/actions/schedule",array(
                    "schedule_time" => $utcDate,
                    ));
                $this->message(sprintf($this->_('Campaign scheduled to send at: %s'), $utcDate));
                $this->session->redirect("../edit/?id=$campaign_id");
            }
        }

        if($this->input->post->unschedulecampaign){
            $this->mailchimp->_post("/campaigns/{$campaign_id}/actions/unschedule");
            $this->message($this->_('Campaign unscheduled'));
            $this->session->redirect("../edit/?id=$campaign_id");
        }

        // delete campaign
        if($this->input->post->deletecampaign){
            $retval = $this->mailchimp->_delete("campaigns/$campaign_id");
            if(!$retval){
                $this->error($this->_("Unable to delete Campaign!"));
            } else {
                $this->message($this->_("Campaign deleted!"));
                $this->_delete($campaign_id);
                $this->session->redirect('../');
            }
        }

        // render form
        return $form->render();
    }

    /**
     * Create or add a new campaign to mailchimp
     */
    public function executeAdd() {

        $this->fuel->breadcrumbs->add(new Breadcrumb('../', 'Campaigns'));
        $this->fuel->set('processHeadline', 'Create Campaign');

        if($this->input->post->submit) {

            $form = $this->_buildAddForm();
            $form->processInput($this->input->post);

            $newsletterPageUrl = $form->get("newsletter_url") ? $form->get("newsletter_url")->value : null;
            $newsletterLangID = $form->get("newsletter_lang") ? $form->get("newsletter_lang")->value : null;
            $newsletterPageID = (int) $form->get("newsletter_id")->value;

            if(!$form->getErrors()){

                // create new campaign
                $opts = array(
                    'type' => "regular",
                    'recipients' => array(
                        'list_id' => $form->get("list_id")->value
                        ),
                    'settings' => array(
                        'authenticate' => true,
                        'title' => $form->get("title")->value,
                        'folder_id' => "",
                        'subject_line' => $form->get("subject_line")->value,
                        'reply_to' => $form->get("reply_to")->value,
                        'from_name' => $form->get("from_name")->value,
                        'to_name' => $form->get("to_name")->value,
                        ),
                    'tracking' => array(
                        'opens' => true,
                        'html_clicks' => true,
                        'text_clicks' => false,
                        ),
                    );

                $listSegmentID = $form->get("segment_" . $form->get("list_id")->value)->value;
                if($listSegmentID) {
                    $opts['recipients']['segment_opts']['saved_segment_id'] = (int) $listSegmentID;
                }

                $res = $this->mailchimp->_post("campaigns", $opts);

                if($res && isset($res['id'])){
                    $res2 = "";
                    if($this->contentType == "url"){
                        // send url (public newsletters)
                        $res2 = $this->mailchimp->_put("campaigns/{$res['id']}/content", array("url" => $newsletterPageUrl));
                        $this->_insert($newsletterPageID, $newsletterPageUrl, NULL, $res['id'], $opts['recipients']['list_id'], $listSegmentID);

                    } else if($this->contentType == "html") {
                        // send the html (if not a public newsletters)
                        if($this->wire("languages") && count($this->wire("languages")) > 1) {
                            $lang = $this->wire("languages")->get($newsletterLangID);
                            $_savedlang = $this->wire("user")->language;
                            $this->wire("user")->language = $lang;
                            $newsletterHtml = $this->wire("pages")->get($newsletterPageID)->render();
                            $this->wire("user")->language = $_savedlang;
                        } else {
                            $newsletterHtml = $this->wire("pages")->get($newsletterPageID)->render();
                        }

                        if($newsletterHtml) {
                            $res2 = $this->mailchimp->_put("campaigns/{$res['id']}/content", array("html" => $newsletterHtml));
                        } else {
                            $this->error("No html could be rendered and sent to MailChimp.");
                        }
                    }

                    if($res2 && $res2['success']) {
                        $this->_insert($newsletterPageID, $newsletterPageUrl, $newsletterLangID, $res['id'], $opts['recipients']['list_id'], $listSegmentID);
                        $this->message(sprintf($this->_("New campaign '%s' created on MailChimp"), $opts['settings']['title']));
                        $this->session->redirect("../edit/?id={$res['id']}");
                    } else {
                        $this->error(sprintf($this->_("Could not create Campaign on MailChimp"), $opts['settings']['title']));
                    }

                } else {
                    $this->error(sprintf($this->_("Could not create Campaign on MailChimp"), $opts['settings']['title']));
                    $this->session->redirect("../add/");
                }

            }
        } else {
            $form = $this->_buildAddForm();
        }

        return $form->render();
    }


    /**
     * Show stats for the sent campaign
     */
    public function executeStats(){

        $this->fuel->breadcrumbs->add(new Breadcrumb('../', 'Campaigns'));

        $campaign_id = $this->input->get('id');
        $campaignData = $this->mailchimp->_get("campaigns/$campaign_id");
        $reportData = $this->mailchimp->_get("reports/$campaign_id");

        $title = sprintf($this->_('Campaign Stats: %s'), $reportData['campaign_title']);
        $this->fuel->set('processHeadline', $title);

        $form = $this->modules->get("InputfieldForm");
        $form->attr("id+name","CampaignStatsForm");
        $form->attr("action","#");
        $form->attr('id',$this->className());

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . $this->_("CampaignStats1"));
        $wrapper->attr("title", $this->_("Sent and opened"));
        $field = $this->modules->get("InputfieldMarkup");
        $field->value .= "<div class='MC_stats'>";
        $field->value .= "<p class='MC_stat'><span>{$reportData['emails_sent']}</span>Emails sent</p>";
        $field->value .= "<p class='MC_stat'><span>{$reportData['opens']['opens_total']}</span>Opens</p>";
        $field->value .= "<p class='MC_stat'><span>{$reportData['opens']['unique_opens']}</span>Unique opens</p>";
        $openRate = round($reportData['opens']['open_rate'],2);
        $field->value .= "<p class='MC_stat'><span>{$openRate}</span>Open rate</p>";
        $lastOpenDate = $reportData['opens']['last_open'] ? $this->dateGmtToLocal($reportData['opens']['last_open']) : "N/A";
        $field->value .= "<p class='MC_stat'><span class='date'>" . $lastOpenDate . "</span>Last opened<br/></p>";


        $geoStats = $this->mailchimp->_get("reports/$campaign_id/locations");
        $table = wire("modules")->MarkupAdminDataTable;
        $table->setEncodeEntities(false);
        $table->headerRow(array(
            __("Opens"),
            __("Location"),
        ));
        foreach($geoStats['locations'] as $geo){
            $table->row(array("<b>{$geo['opens']}</b>", $geo['region'] . " " . $geo['country_code']));
        }
        $field->value .= $table->render();

        $field->value .= "</div>";
        $wrapper->add($field);
        $form->add($wrapper);


        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . $this->_("CampaignStats2"));
        $wrapper->attr("title", $this->_("Clicks and bounces"));
        $field = $this->modules->get("InputfieldMarkup");
        $field->value .= "<div class='MC_stats'>";
        $field->value .= "<p class='MC_stat'><span>{$reportData['clicks']['clicks_total']}</span>User clicks</p>";
        $field->value .= "<p class='MC_stat'><span>{$reportData['clicks']['unique_clicks']}</span>Unique clicks</p>";
        $field->value .= "<p class='MC_stat'><span>{$reportData['bounces']['hard_bounces']}</span>Hard bounces</p>";
        $field->value .= "<p class='MC_stat'><span>{$reportData['bounces']['soft_bounces']}</span>Soft bounces</p>";
        $field->value .= "</div>";

        $clickStats = $this->mailchimp->_get("reports/$campaign_id/click-details");
        $table = wire("modules")->MarkupAdminDataTable;
        $table->setEncodeEntities(false);
        $table->headerRow(array(
            __("Clicks"),
            __("Link"),
        ));
        foreach($clickStats['urls_clicked'] as $click){
            $table->row(array("<b>{$click['total_clicks']}</b>", $click['url']));
        }
        $field->value .= $table->render();

        $wrapper->add($field);
        $form->add($wrapper);


        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . $this->_("CampaignContent"));
        $wrapper->attr("title", $this->_("Campaign Infos & Content"));
        $field = $this->modules->get("InputfieldMarkup");

        $url = $this->pages->get("name=mailchimp-campaigns")->url;
        $field->value .= "<div class='MC_iframe'>";
        $field->value .= "<h2>Details</h2>";

        $newsletter_id = $this->_getNewsletterPageID($campaign_id);
        $newsletterPage = $this->pages->get((int) $newsletter_id);

        if($newsletterPage->id){
            $table = wire("modules")->MarkupAdminDataTable;
            $table->setEncodeEntities(false);
            $table->headerRow(array(
                "",
                "",
            ));
            $pageEditUrl = wire("config")->urls->admin . "page/edit/?id=$newsletter_id";
            $newsletter_url = $this->_getNewsletterURL($campaign_id);
            $table->row(array("<b>Newsletter Page</b>", "<a href='$pageEditUrl' target='_blank'>{$newsletterPage->title}</a>"));
            $table->row(array("<b>URL</b>", "<a href='$newsletter_url' target='_blank'>$newsletter_url</a>"));
            $field->value .= $table->render();
        }


        $table = wire("modules")->MarkupAdminDataTable;
        $table->setEncodeEntities(false);
        $table->headerRow(array(
            "",
            "",
        ));
        $table->row(array("<b>Title</b>", $reportData['campaign_title']));
        $table->row(array("<b>Type</b>", $reportData['type']));
        $table->row(array("<b>Send Time</b>", $this->dateGmtToLocal($reportData['send_time'])));
        $table->row(array("<b>Status</b>", $campaignData['status']));
        $table->row(array("<b>From name</b>", $campaignData['settings']['from_name']));
        $table->row(array("<b>From email</b>", $campaignData['settings']['reply_to']));
        $table->row(array("<b>Subject</b>", $campaignData['settings']['subject_line']));
        $table->row(array("<b>To name</b>", $campaignData['settings']['to_name']));
        $table->row(array("<b>Emails sent</b>", $reportData['emails_sent']));
        $table->row(array("<b>Segment text</b>", $campaignData['recipients']['segment_text']));
        $field->value .= $table->render();

        $field->value .= "<h2>HTML View</h2>";
        $field->value .= "<iframe style='width:100%; height:800px' src='{$url}campaigncontent/?id=$campaign_id&amp;html=1&iframe&modal=1'></iframe>";
        $field->value .= "<h2>Plain Text View</h2>";
        $field->value .= "<iframe style='width:100%; height:800px' src='{$url}campaigncontent/?id=$campaign_id&amp;text=1&iframe&modal=1'></iframe>";
        $field->value .= "</div>";
        $wrapper->add($field);
        $form->add($wrapper);

        return $form->render();
    }

    /**
     * Preview Email Newsletter
     */
    public function executeCampaigncontent(){
        $id = $this->input->get('id');
        $html = $this->input->get('html');
        // $api = new MCAPI($this->apikey);
        $content = $this->mailchimp->_get("campaigns/$id/content");
        if($content){
            if($html == 1) {
                echo $content['html'];
            } else {
                echo "<html>
                            <head></head>
                            <body style='background-color: white; padding: 20px'>
                                <div>" . nl2br($content['plain_text']) . "</div>
                            </body>
                        </html>";
            }
        } else {
            echo "no content found";
        }

        exit();
    }


    /**
     * get all campaigns
     * @return MarkupAdminDataTable table of campaigns
     */
    public function _campaignsTable(Array $campaigns){

        $table = $this->modules->get("MarkupAdminDataTable");
        $table->headerRow(array(
            "Title",
            "List",
            "Segment",
            "Status",
            "Type",
            "created",
            "Send Time",
            "Sent to",
            "ID",
            "Folder",
            "Action"
            ));

        // create folders array to easy map campaigns folders id getting the name of the folder
        $folders = $this->mailchimp->_get("campaign-folders", array("count" => 50));
        $foldersMap = array();
        foreach($folders['folders'] as $f){
            $foldersMap[$f['id']] = $f['name'];
        }

        // create list array to easy map campaigns lists id getting the name of the list
        $lists = $this->mailchimp->_get("lists", array("count" => 100));
        $listsMap = array();
        foreach($lists['lists'] as $list){
            $listsMap[$list['id']] = $list['name'];
        }

        foreach($campaigns as $ca) {

            if($ca['status'] == 'sent') {
                $action_name = $this->_("stats");
                $action = $this->moduleUrl . "stats/?id=" . $ca['id'];
            } else if($ca['status'] == 'sending'){
                $action_name = $this->_("sending...");
                $action = null;
            } else {
                $action_name = $this->_("edit");
                $action = $this->moduleUrl . "edit/?id=" . $ca['id'];
            }


            $list_name = "";
            if(isset($listsMap[$ca['recipients']['list_id']])){
                $list_name = $listsMap[$ca['recipients']['list_id']];
            }
            $folder_name = "-";
            if(isset($foldersMap[$ca['settings']['folder_id']])){
                $folder_name = $foldersMap[$ca['settings']['folder_id']];
            }

            // segment informations if campaign uses segment
            $segment_name = "";
            $segment_members_count = "";
            $segmentID = isset($ca['recipients']['segment_opts']['saved_segment_id']) ? $ca['recipients']['segment_opts']['saved_segment_id'] : "";

            if($segmentID){
                $listID = $ca['recipients']['list_id'];
                $segment = $this->mailchimp->_get("lists/{$listID}/segments/{$segmentID}", array(
                    "fields" => "name,member_count",
                    ));
                if($segment){
                    $segment_members_count = $segment['member_count'];
                    $segment_name .= $segment['name'] . " ($segment_members_count)";
                }
            }

            $title = $ca['settings']['title'];
            if(!$title) $title = $this->_("No name defined");
            $table->row(array(
                $title => "$action",
                $list_name,
                $segment_name,
                $ca['status'],
                $ca['type'],
                $created = $ca['create_time'] ? $this->dateGmtToLocal($ca['create_time']) : "-",
                $sendtime = $ca['send_time'] ? $this->dateGmtToLocal($ca['send_time']) : "-",
                $ca['emails_sent'],
                $ca['id'],
                $folder_name,
                $action_name => "$action"
            ));
        }

        return $table;
    }

    protected function _buildEditForm($data = array()) {

        $this->modules->get('JqueryUI')->use('modal');

        $campaign_id = $data['id'];
        $is_scheduled = $data['status'] == "schedule";

        // print_r($data);
        // check if newsletter exists in PW DB, if not we insert it
        $exists = $this->_exists($campaign_id);
        if(!$exists) {
            $listID = $data['recipients']["list_id"];
            $listSegmentID = isset($data['recipients']['segment_opts']) ? $data['recipients']['segment_opts']['saved_segment_id'] : NULL;
            $this->_insert(NULL, NULL, NULL, $campaign_id, $listID, $listSegmentID);
        }

        $form = $this->modules->get("InputfieldForm");
        $form->action = "../edit/?id=$campaign_id";
        $form->method = "post";
        $form->attr('id',$this->className());

        $field = $this->modules->get('InputfieldHidden');
        $field->attr('name', 'id');
        $field->attr('value', $campaign_id);
        $form->append($field);

        // build tabs
        $wrapper_settings   = $this->_buildSettingsTab($data);
        $wrapper_content    = $this->_buildContentTab($data);
        $wrapper_test       = $this->_buildSendTestTab($data);
        $wrapper_send       = $this->_buildSendTab($data);
        $wrapper_schedule   = $this->_buildScheduleTab($data);
        $wrapper_delete     = $this->_buildDeleteTab($data);

        $form->add($wrapper_settings);
        $form->add($wrapper_content);

        if($data['status'] != 'sent' && $data['status'] != 'sending') {
            $form->add($wrapper_test);
            $form->add($wrapper_schedule);
            $form->add($wrapper_send);
            $form->add($wrapper_delete);
        }

        /**
         * update button
         */
        $save = $this->modules->get("InputfieldSubmit");
        $save->value = $this->_("Update Campaign");
        $save->attr("id+name", "submit");
        $save->attr("class", $save->class . " head_button_clone");

        $form->add($save);

        return $form;
    }


    protected function _buildSettingsTab($data){

        $wrapper_settings = new InputfieldWrapper();
        $wrapper_settings->attr("id", $this->className() . "Settings");
        $wrapper_settings->attr("title", $this->_("Settings"));

        $field = $this->modules->get("InputfieldText");
        $field->attr('id+name', "title");
        $field->label = $this->_("Campaign name");
        $field->description = $this->_("Please enter a name for the newsletter, for internal use only.");
        $field->required = 1;
        $field->maxlength = 150;
        $field->attr('value', $data['settings']['title']);
        $wrapper_settings->add($field);


        $field = $this->modules->get("InputfieldSelect");
        $field->attr('name', "list_id");
        $field->label = $this->_("Email List");
        $field->description = $this->_("Change E-mail List.");
        $field->notes = $this->_("NOTE: If you change the list here, the list's default settings will be entered as you defined them in Mailchimp.");
        $field->required = 1;

        $lists = $this->mailchimp->_get("lists", array("count" => 100));

        if(is_array($lists["lists"])){
            $field->addOption("", "");
            $segmentsArray = array();

            foreach($lists["lists"] as $l){

                $listSegments = $this->mailchimp->_get("lists/{$l['id']}/segments");
                $segmentsCount = count($listSegments['segments']);
                if($segmentsCount){
                    foreach($listSegments['segments'] as $segment){
                        $segmentTest = $this->mailchimp->_get("lists/{$l['id']}/segments/{$segment['id']}", array(
                                    "fields" => "name,member_count",
                                ));
                        if(isset($segmentTest['member_count'])) $segment['name'] .= " ({$segmentTest['member_count']})";
                        $segmentsArray[$l['id']][$segment['id']] = $segment['name'];
                    }
                }

                $listName = $l['name'];
                $listName .= $segmentsCount ? " ( " . sprintf($this->_("%s segments"), $segmentsCount) . " )" : "";
                $field->addOption($l['id'], $listName, array(
                                "data-from_name" => $l['campaign_defaults']['from_name'],
                                "data-reply_to" => $l['campaign_defaults']['from_email'],
                                "data-subject_line" => $l['campaign_defaults']['subject'],
                                ));
            }
        }

        $field->attr('value', $data['recipients']['list_id']);
        $wrapper_settings->add($field);

        foreach($segmentsArray as $listID => $seg) {

            $segField = wire("modules")->InputfieldSelect;
            $segField->attr("name", "segment_" . $listID);
            $segField->label = $this->_("Segment(s)");
            $segField->columnWidth = 100;
            $segField->showIf = "list_id=$listID";

            foreach($seg as $sID => $se) $segField->addOption($sID, $se);

            if(isset($data['recipients']['segment_opts']['saved_segment_id'])){
                $segField->attr("value", $data['recipients']['segment_opts']['saved_segment_id']);
            }
            $wrapper_settings->add($segField);
        }


        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"subject_line");
        $field->label = $this->_("'subject line'");
        $field->description = $this->_("Email subject for your campaign message. Keep it relevant and non-spammy.");
        $field->description .= " " . $this->_("[Infos](http://kb.mailchimp.com/campaigns/previews-and-tests/best-practices-for-email-subject-lines)");
        $field->required = 1;
        $field->maxlength = 150;
        $field->attr('value', $data['settings']['subject_line']);
        $wrapper_settings->add($field);

        $field = $this->modules->get("InputfieldEmail");
        $field->attr('name',"reply_to");
        $field->label = $this->_("'from' email");
        $field->description = $this->_("This is the address people will send replies to. Make sure someone actually checks this email account.");
        $field->notes = $this->_("Some email services block spam by responding to emails with a challenge question that asks the sender to complete a simple task that proves they are not a spam bot. If the reply-to email address you provide is not frequently checked, you could miss these challenge response emails, and therefore decrease your delivery rate.");
        $field->required = 1;
        $field->maxlength = 100;
        $field->attr('value', $data['settings']['reply_to']);
        $wrapper_settings->add($field);

        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"from_name");
        $field->label = $this->_("'from name'");
        $field->notes = $this->_("This is the name your emails will come from. Use something your subscribers will instantly recognize, like your company name.");
        $field->required = 1;
        $field->maxlength = 100;
        $field->attr('value', $data['settings']['from_name']);
        $wrapper_settings->add($field);

        $field = $this->modules->get("InputfieldText");
        $field->attr('name', "to_name");
        $field->label = $this->_("'to name'");
        $field->notes = $this->_("Include the recipient’s name in the message using merge tags to make it more personal and help avoid spam filters. For example, *|FNAME|* *|LNAME|* will show 'To: Bob Smith' in the email instead of 'To: bob@example.com'. This is more personal and may help avoid spam filters.");
        $field->required = 0;
        $field->entityEncodeText = false;
        $field->maxlength = 100;
        $field->attr('value', $data['settings']['to_name']);
        $wrapper_settings->add($field);

        return $wrapper_settings;
    }


    protected function _buildContentTab($data){

        $campaign_id = $data['id'];

        $newsletter_title = "";

        $newsletter_url = $this->_getNewsletterURL($campaign_id);
        $newsletter_id = $this->_getNewsletterPageID($campaign_id);
        $newsletterlang_id = $this->_getNewsletterLangID($campaign_id);
        $newsletterPage = $this->pages->get((int) $newsletter_id);

        if($newsletterPage->id){
            $newsletter_title = $newsletterPage->title;
        }

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . "EmailContent");
        $wrapper->attr("title", $this->_("Email Content"));

        // newletter page
        $field = $this->modules->get("InputfieldPageListSelect");
        $field->attr('name',"newsletter_id");
        $field->label = $this->_("Newsletter Page");
        $editLink = '';
        if($newsletter_id) $editLink = "<[ " . $this->_("edit Newsletter Page") . " ](/processwire/page/edit/?id=$newsletter_id) >";
        $field->description = sprintf($this->_('Choose a newsletter from the list. %s'), $editLink);
        $field->parent_id = $this->mailchimp->newsletter_parent_id;
        $field->derefAsPage = 0;
        $field->labelFieldName = "title";
        $page_required = 1;
        // make the field required only if newsletter_url is not entered
        if(!$this->mailchimp->newsletter_parent_id){
            $this->message($this->_("Newsletter Parent Page ID not specified in MailChimpNewsletter module settings. You still can alternatively enter a URL below."));
        }

        $field->required = $page_required;
        $field->attr('value', $newsletter_id);
        $wrapper->add($field);

        if($this->contentType == "url"){
            // newsletter url
            $field = $this->modules->get("InputfieldURL");
            $field->attr('name',"newsletter_url");
            $field->label = $this->_("Newsletter URL");
            $field->description = $this->_("The public URL for the email content.");
            $field->entityEncodeText = false;
            $url_required = 1;
            if($newsletterPage->id){
                $field->description .= "<br>" . $this->_("Available URLs for this page") . ":";
                $urls = wire("modules")->MailChimpNewsletter->getNewsletterUrlsArray($newsletterPage);
                foreach($urls as $langID => $url){
                    $field->description .= "<br>" . $url['url'];
                }
            }

            $field->required = $url_required;
            $field->attr('value', $newsletter_url);
            $wrapper->add($field);
        }

        if($this->contentType == "html") {
            // if sending html and we have more than one language installed
            if(count($this->wire("languages")) > 1){
                $field = $this->modules->get("InputfieldRadios");
                $field->attr('name',"newsletter_lang");
                $field->label = $this->_("Newsletter Language");
                foreach($this->wire("languages") as $lang) {
                    $field->addOption($lang->id, $lang->title);
                }
                $field->attr('value',(int) $newsletterlang_id);
                $field->required = 1;
                $field->description = $this->_("The language you want to use from this newsletter.");
                $wrapper->add($field);
            }
        }

        $url = $this->pages->get("name=mailchimp-campaigns")->url;

        $preview = $this->modules->get("InputfieldMarkup");
        $preview->label = $this->_("Preview");
        $preview->description = $this->_("Preview the generated newsletter that will be sent");
        $preview->attr('id',"MC_NewsletterPreview");

        $button = $this->modules->get("InputfieldButton");
        $button->attr("id", "MC_NewsletterPreviewHtml");
        $button->attr("value",$this->_("HTML Email"));
        $button->attr('data-href',"{$url}campaigncontent/?id=$campaign_id&amp;html=1&iframe&modal=1");
        $button->addClass("pw-modal");
        $preview->value = $button->render();

        $button = $this->modules->get("InputfieldButton");
        $button->attr("id", "MC_NewsletterPreviewText");
        $button->attr("value",$this->_("Text Email"));
        $button->attr('data-href',"{$url}campaigncontent/?id=$campaign_id&amp;html=0&iframe&modal=1");
        $button->addClass("pw-modal");
        $preview->value .= $button->render();

        $wrapper->add($preview);

        return $wrapper;
    }


    protected function _buildSendTestTab($data){

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . "SendTest");
        $wrapper->attr("title", $this->_("Send Test"));

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->label = $this->_("Send Test Email");

        $field = $this->modules->get("InputfieldText");
        $field->label = $this->_("Test Email Address");
        $field->description = $this->_("Enter multiple E-Mails comma separated");
        // NO V3 for this!
        // $field->notes = sprintf($this->_('Tests sent: %1$s, Tests remaining: %2$s. (limit per day)'), $data['tests_sent'],$data['tests_remain']);
        $field->attr("id+name","email_test");
        $field->required = 1;
        $fieldset->append($field);

        $field = $this->modules->get("InputfieldSubmit");
        $field->value = $this->_("Send Test");
        $field->attr("id+name", "sendtest");

        $fieldset->append($field);
        $wrapper->add($fieldset);

        return $wrapper;
    }


    protected function _buildSendTab($data){

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . "SendCampaign");
        $wrapper->attr("title", $this->_("Send Campaign"));

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->label = $this->_("Send Campaign");

        $field = $this->modules->get("InputfieldSubmit");
        $field->value = $this->_("Send Campaign now");
        $field->attr("id+name", "sendcampaign");

        $fieldset->append($field);
        $wrapper->add($fieldset);

        return $wrapper;

    }

    protected function _buildScheduleTab($data){

        $is_scheduled = $data['status'] == "schedule";
        $scheduleDate = "";
        $scheduleHour = "";
        $scheduleMin = "";
        $scheduleDateStr = "";

        if($is_scheduled) {
            $scheduleDateLocal = $this->dateGmtToLocal($data['send_time']);
            $scheduleDate = date("Y-m-d", strtotime($scheduleDateLocal));
            $scheduleHour = date("H", strtotime($scheduleDateLocal));
            $scheduleMin = date("i", strtotime($scheduleDateLocal));
            $scheduleDateStr = $scheduleDate . " " . $scheduleHour . ":" . $scheduleMin;
        }

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . "ScheduleCampaign");
        $wrapper->attr("title", $this->_("Schedule Campaign"));

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->label = $this->_("Schedule Campaign");

        $field = $this->modules->get("InputfieldMarkup");
        $field->label = __("Schedule Date");
        $field->attr("name", "schedule_datestr");
        $field->attr("value", $is_scheduled ? $scheduleDateStr : __("No schedule set"));
        $fieldset->append($field);

        $field = $this->modules->get("InputfieldDatetime");
        $field->label = __("Schedule Date");
        $field->attr("name", "schedule_date");
        $field->attr("value", $scheduleDate);
        $field->datepicker = InputfieldDatetime::datepickerClick;
        $field->columnWidth = 33;
        $fieldset->append($field);

        $field = $this->modules->get("InputfieldSelect");
        $prepend = array('00','01','02','03','04','05','06','07','08','09');
        $rangeHours = array_merge($prepend, range(10,23));
        foreach($rangeHours as $hour) $field->addOption($hour);
        $field->label = __("Schedule Hour");
        $field->attr("name", "schedule_hour");
        $field->attr("value", $scheduleHour);
        $field->columnWidth = 33;
        $fieldset->append($field);

        $field = $this->modules->get("InputfieldSelect");
        $rangeMin = array('00','15','30','45');
        foreach($rangeMin as $min) $field->addOption($min);
        $field->label = __("Schedule Min");
        $field->attr("name", "schedule_min");
        $field->attr("value", $scheduleMin);
        $field->columnWidth = 33;
        $fieldset->append($field);


        $field = $this->modules->get("InputfieldSubmit");
        $field->value = $this->_("Save Schedule");
        $field->attr("id+name", "schedulecampaign");
        $fieldset->append($field);

        $field = $this->modules->get("InputfieldSubmit");
        $field->value = $this->_("Unschedule");
        $field->attr("id+name", "unschedulecampaign");
        $fieldset->append($field);

        $wrapper->add($fieldset);

        return $wrapper;

    }

    protected function _buildDeleteTab($data){

        $wrapper = new InputfieldWrapper();
        $wrapper->attr("id", $this->className() . "DeleteCampaign");
        $wrapper->attr("title", $this->_("Delete Campaign"));

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->label = $this->_("Delete Campaign");

        $field = $this->modules->get("InputfieldSubmit");
        $field->value = $this->_("Delete Campaign now");
        $field->attr("id+name", "deletecampaign");

        $fieldset->append($field);
        $wrapper->add($fieldset);

        return $wrapper;
    }


    protected function _buildAddForm() {

        $form = $this->modules->get("InputfieldForm");
        $form->action = "../add/";
        $form->method = "post";
        $form->attr('id',$this->className());

        $field = $this->modules->get("InputfieldText");
        $field->attr('name', "title");
        $field->label = $this->_("Campaign name");
        $field->description = $this->_("Please enter a title for the newsletter. Internal use only.");
        $field->required = 1;

        // set pageID from url parameter? this is when coming from newletter page "create" link
        $langTitle = "";
        if(wire("input")->get->nlid) {
            if(count(wire("languages")) > 1) {
                $savedLang = wire("user")->language;
                $lang = wire("languages")->get((int) wire("input")->get->nllang);
                if($lang->id) {
                    wire("user")->language = $lang;
                    $nlPage = wire("pages")->get((int) wire("input")->get->nlid);
                    $langTitle = (string) $nlPage->title;
                }
                wire("user")->language = $savedLang;
            }
        }
        $field->attr("value", $langTitle);
        $form->add($field);


        $field = $this->modules->get("InputfieldSelect");
        $field->attr('name',"list_id");
        $field->label = $this->_("Email List");
        $field->description = $this->_("Please choose an E-mail List. After selecting a List more fields will appear below.");
        $field->notes = $this->_("The List's default settings will be entered as you defined them in Mailchimp.");
        $field->required = 1;
        $field->columnWidth = 100;

        $lists = $this->mailchimp->_get("lists", array("count" => 100));


        if(is_array($lists["lists"])){
            $field->addOption("", "");

            $segmentsArray = array();

            foreach($lists["lists"] as $l){
                $listSegments = $this->mailchimp->_get("lists/{$l['id']}/segments");

                // print_r($listSegments);
                $segmentsCount = count($listSegments['segments']);

                if($segmentsCount){
                    foreach($listSegments['segments'] as $segment){
                        $segmentID = $segment['id'];
                        $segmentTest = $this->mailchimp->_get("lists/{$l['id']}/segments/$segmentID", array(
                            "fields" => "name,member_count"
                        ));
                        if(isset($segmentTest['member_count'])) $segment['name'] .= " ({$segmentTest['member_count']})";
                        $segmentsArray[$l['id']][$segment['id']] = $segment['name'];
                    }
                }

                $listName = $l['name'];
                $listName .= $segmentsCount ? " ( " . sprintf($this->_("%s segments"), $segmentsCount) . " )" : "";

                $field->addOption($l['id'], $listName, array(
                        "data-from_name" => $l['campaign_defaults']['from_name'],
                        "data-reply_to" => $l['campaign_defaults']['from_email'],
                        "data-subject_line" => $l['campaign_defaults']['subject'],
                    ));
            }
        }

        $form->add($field);

        foreach($segmentsArray as $listID => $seg){
            $segField = wire("modules")->InputfieldSelect;
            $segField->attr("name", "segment_" . $listID);
            $segField->label = $this->_("Segment(s)");
            $segField->columnWidth = 100;
            $segField->showIf = "list_id=$listID";
            foreach($seg as $sID => $s) $segField->addOption($sID, $s);
            $form->add($segField);
        }

        $fieldset = $this->modules->InputfieldFieldset;
        $fieldset->label = $this->_("Enter E-mail Campaign Details");
        $fieldset->showIf = "list_id!=''";

        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"subject_line");
        $field->label = $this->_("'subject line'");
        $field->description = $this->_("Email subject for your campaign message. Keep it relevant and non-spammy.");
        $field->description .= " " . $this->_("[Infos](http://kb.mailchimp.com/campaigns/previews-and-tests/best-practices-for-email-subject-lines)");
        $field->required = 1;
        $field->maxlength = 150;
        $fieldset->add($field);

        $field = $this->modules->get("InputfieldEmail");
        $field->attr('name',"reply_to");
        $field->label = $this->_("'from' email");
        $field->description = $this->_("This is the address people will send replies to. Make sure someone actually checks this email account.");
        $field->notes = $this->_("Some email services block spam by responding to emails with a challenge question that asks the sender to complete a simple task that proves they are not a spam bot. If the reply-to email address you provide is not frequently checked, you could miss these challenge response emails, and therefore decrease your delivery rate.");
        $field->required = 1;
        $field->maxlength = 100;
        $fieldset->add($field);

        $field = $this->modules->get("InputfieldText");
        $field->attr('name',"from_name");
        $field->label = $this->_("'from name'");
        $field->notes = $this->_("This is the name your emails will come from. Use something your subscribers will instantly recognize, like your company name.");
        $field->required = 1;
        $field->maxlength = 100;
        $fieldset->add($field);

        $field = $this->modules->get("InputfieldText");
        $field->attr('name', "to_name");
        $field->label = $this->_("'to name'");
        $field->notes = $this->_("Include the recipient’s name in the message using merge tags to make it more personal and help avoid spam filters. For example, *|FNAME|* *|LNAME|* will show 'To: Bob Smith' in the email instead of 'To: bob@example.com'. This is more personal and may help avoid spam filters.");
        $field->required = 0;
        $field->entityEncodeText = false;
        $field->maxlength = 100;
        $fieldset->add($field);

        $form->add($fieldset);


        $fieldset = $this->modules->InputfieldFieldset;
        $fieldset->label = $this->_("Select Newsletter Page or directly enter Newsletter URL");
        // $fieldset->showIf = "list_id!=''";

        // select newletter page
        if($this->mailchimp->newsletter_parent_id){
            $field = $this->modules->get("InputfieldPageListSelect");
            $field->attr('name',"newsletter_id");
            $field->label = $this->_("Newsletter Page");
            $field->description = sprintf($this->_("Choose a newsletter page from the list. Create them in the Newsletters folder [here](/processwire/page/?open=%s)"), $this->mailchimp->newsletter_parent_id);
            $field->parent_id = $this->mailchimp->newsletter_parent_id;
            $field->template_id = 70;
            $field->derefAsPage = 0;
            $field->labelFieldName = "title";
            $page_required = 1;
            // make the field required only if newsletter_url is not entered
            // if($this->input->post->newsletter_url) $page_required = 0;
            $field->required = $page_required;
            // $field->showIf = "newsletter_url=''";
            $field->attr("value", wire("input")->get->nlid ? wire("input")->get->nlid : "");
            $fieldset->add($field);
        } else {
            $this->message($this->_("Newsletter Parent Page ID not specified in MailChimpNewsletter module settings. You still can alternatively enter a URL below."));
        }

        if($this->contentType == "url"){
            $field = $this->modules->get("InputfieldURL");
            $field->attr('name',"newsletter_url");
            $field->entityEncodeText = false;
            $field->required = 1;
            $field->label = $this->_("Newsletter URL");
            $field->description = $this->_("The public URL for the email content. This will be populated automaticly when selecting the newsletter page above.");
            if(wire("input")->get->nlid) {
                $nlid = (int) wire("input")->get->nlid;
                $nlPage = wire("pages")->get($nlid);
                if($nlPage->id){
                    $field->description .= "<br>" . $this->_("Available URLs for this page") . ":";
                    $urls = wire("modules")->MailChimpNewsletter->getNewsletterUrlsArray($nlPage);
                    foreach($urls as $langID => $url){
                        $field->description .= "<br>" . $url['url'];
                    }
                }
            }
            $field->attr("value", wire("input")->get->nlurl ? wire("input")->get->nlurl : "");
        }

        if($this->contentType == "html"){
            // if sending html and we have more than one language installed
            if(count($this->wire("languages")) > 1){
                $field = $this->modules->get("InputfieldRadios");
                $field->attr('name',"newsletter_lang");
                $field->label = $this->_("Newsletter Language");
                foreach($this->wire("languages") as $lang) {
                    $field->addOption($lang->id, $lang->title);
                }
                $field->required = 1;
                $field->description = $this->_("The language you want to use from this newsletter.");
                $field->attr("value", wire("input")->get->nllang ? wire("input")->get->nllang : "");
            }
        }

        $fieldset->add($field);
        $form->add($fieldset);

        $save = $this->modules->get("InputfieldSubmit");
        $save->value = $this->_("Create Campaign");
        $save->attr('name', "submit");
        $save->attr('class', $save->class . ' head_button_clone');

        $form->add($save);
        return $form;
    }

    protected function _getNewsletterPageID($cid) {
        $query = "SELECT * FROM {$this->className} WHERE campaign_id = '$cid';";
        $res = $this->db->query($query);
        $arr = $res->fetch_array();
        return $arr['newsletter_id'];
    }

    protected function _getNewsletterLangID($cid) {
        $query = "SELECT * FROM {$this->className} WHERE campaign_id = '$cid';";
        $res = $this->db->query($query);
        $arr = $res->fetch_array();
        return $arr['lang_id'];
    }

    protected function _getNewsletterURL($cid) {
        $query = "SELECT * FROM {$this->className} WHERE campaign_id = '$cid';";
        $res = $this->db->query($query);
        $arr = $res->fetch_array();
        return $arr['newsletter_url'];
    }

    protected function _insert($newsletter_id, $newsletter_url, $newsletter_lang, $campaign_id, $list_id, $segment_id) {
        $newsletter_url = $this->sanitizer->url($newsletter_url);
        if($newsletter_id == 0) $newsletter_id = "NULL";
        if($newsletter_lang == 0) $newsletter_lang = "NULL";
        $query = "INSERT INTO {$this->className()} (campaign_id, newsletter_id, newsletter_url, lang_id, list_id, segment_id, created)
                VALUES ('$campaign_id', $newsletter_id, '$newsletter_url', $newsletter_lang, '$list_id', '$segment_id', now())";
        $result = $this->db->query($query);
        $this->message($this->_("New Campaign inserted/updated"));
        return @mysqli_insert_id($this->db);
    }

    protected function _update($newsletter_id, $newsletter_url, $newsletter_lang, $campaign_id, $list_id, $segment_id) {
        $newsletter_url = $this->sanitizer->url($newsletter_url);
        if($newsletter_id == 0) $newsletter_id = "NULL";
        if($newsletter_lang == 0) $newsletter_lang = "NULL";
        $values = "newsletter_id=" . $newsletter_id . ",";
        $values .= "newsletter_url='" . $newsletter_url . "',";
        $values .= "lang_id='" . $newsletter_lang . "',";
        $values .= "list_id='" . $list_id . "',";
        $values .= "segment_id='" . $segment_id . "'";
        $query = "UPDATE {$this->className} SET $values WHERE campaign_id='$campaign_id'";
        $result = $this->db->query($query);
        $this->message($this->_("Campaign DB updated."));
        return $result;
    }

    protected function _delete($campaign_id) {
        $query = "DELETE FROM {$this->className} WHERE campaign_id='$campaign_id'";
        $result = $this->db->query($query);
        $this->message($this->_("Campaign deleted from DB"));
        return $result;
    }

    protected function _exists($campaign_id) {
        $query = "SELECT * FROM {$this->className()} WHERE campaign_id='$campaign_id'";
        $result = $this->db->query($query);
        if($result->num_rows == 1) return true;
        return false;
    }

    public function dateGmtToLocal($gmtDate, $fromFormat = 'Y-m-d\TH:i:sT', $toFormat = "Y-m-d H:i"){
        // echo $gmtDate; exit();
        if(!$gmtDate || $gmtDate == 0) return 0;
        $utc_date = DateTime::createFromFormat($fromFormat, $gmtDate, new DateTimeZone('UTC'));
        $date = clone $utc_date;
        $date->setTimeZone(new DateTimeZone(date_default_timezone_get()));
        return $date->format($toFormat);
    }

    public function install() {

        // db schema for saving newsletter
        $sql = <<< _END
        CREATE TABLE {$this->className} (
            id INT UNSIGNED NOT NULL AUTO_INCREMENT,
            newsletter_id INT NULL,
            newsletter_url VARCHAR(255) NULL,
            lang_id INT NULL,
            list_id VARCHAR(32) NULL,
            segment_id VARCHAR(32) NULL,
            campaign_id VARCHAR(32) NULL,
            modified TIMESTAMP NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
            created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
            PRIMARY KEY (`id`)
        )
        ENGINE = MyISAM DEFAULT CHARSET=utf8;
_END;

        $this->db->query($sql);

    }

    public function uninstall() {
        $admin = $this->pages->find("name=mailchimp-campaigns")->first();
        if($admin->id && $this->pages->delete($admin)) {
            $this->message(__("Deleted mailchimp-campaigns admin page."));
        } else {
            $this->error(__("Couldn't find mailchimp-campaigns admin page."));
        }

        $this->db->query("DROP TABLE {$this->className}");

    }

    public function checkSchema() {

        if($this->schemaVersion < 2) {
            $langSchema = "INT NULL";
            // add website field for PW 2.3+
            $database = $this->wire('database');
            try {
                $database->query("ALTER TABLE `{$this->className}` ADD lang_id $langSchema");
                $data = $this->wire("modules")->getModuleConfigData("MailChimpCampaigns");
                $data['schemaVersion'] = self::schemaVersion;
                $this->wire("modules")->saveModuleConfigData("MailChimpCampaigns", $data);
                $this->message("Updated MailChimpCampaign DB schema to version 2");
            } catch(\Exception $e) {
                $this->error($e->getMessage(), Notice::log);
            }

        }

    }

    public static function getModuleConfigInputfields(array $data) {

        if($data) {} // ignore
        $inputfields = new InputfieldWrapper();
        $modules = wire("modules");

        $f = $modules->InputfieldRadios;
        $f->label = "Content Type";
        $f->description = __("How should campaign content be sent to Mailchimp. If your Newsletter is viewable by the public, you should choose 'html'.");
        $f->addOptions(array(
                "url" => "url",
                "html" => "html",
            ));
        $f->attr("name", "contentType");
        $f->attr("value", !empty($data["contentType"]) ? $data["contentType"] : self::defaultContentType);
        $inputfields->add($f);

        $f = $modules->InputfieldInteger;
        $f->label = "SchemaVersion";
        $f->attr("name", "schemaVersion");
        $f->attr("disabled", "disabled");
        $f->attr("value", !empty($data["schemaVersion"]) ? $data["schemaVersion"] : 0);
        $inputfields->add($f);

        return $inputfields;
    }

}
